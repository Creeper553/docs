{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Any question not answered here please ask on either our Discord server or on our Reddit community . Why is there noise/grain/random bright dots in the render? \u00b6 This is not a bug, but an unfortunate effect of the rendering algorithm used in Chunky. Torches and other small light sources cause a very random illumination and it takes a long time to render such light nicely. For more information please read the Path Tracing article . You can disable emitters under the Lighting tab in the Render Controls to remove most of the random bright dots. Other sources of light are typically larger and clear up quickly though HDRi skymaps can be an issue. Note that rendering for a longer time will eventually clear up the noise , though it may take a very long time. There are techniques and plugins which can help reduce noise. For more information please visit jackjt8's Guide to Chunky - Denoising . How long does it take to render an image? \u00b6 There is no exact answer to this question. The main thing that affects render time is your CPU , the size of the image, and the lighting conditions in the scene you are rendering. It can take anywhere from an hour to a couple of days to render a nice image. You can reduce the size of the canvas, disable emitters, enable Emitter Sampling, or use a denoising technique to speed up the convergence rate. See the Path Tracing article or jackjt8's Guide to Chunky - Denoising for more details. Is GPU rendering supported? \u00b6 GPU rendering support is currently in development in the form of an OpenCL 1.2 renderer plugin. This renderer is still under development and many features of the CPU renderer are not yet supported. For more information check out the OpenCL plugin GitHub . How do I pin Chunky to the taskbar / Create shortcuts? \u00b6 Unfortunately you cannot pin jar files in Windows. Though you can create a (bat)ch file which, not only can be double-clicked to launch Chunky, but a shortcut can be made of- Shortcuts can be pinned. To do this open Notepad, or equivalent software, and paste the following: java -jar %~dp0/ChunkyLauncher.jar Then press File > Save As . Navigate to the folder containing ChunkyLauncher.jar. For the file name it is up to you however you do need to change the extension to .bat (ie Chunky.bat ). From here you need to navigate to the newly created .bat file. Right-Click on the .bat file and select Create shortcut . This shortcut can be dragged onto the taskbar to pin it or moved to the desktop, etc. Why are mobs not rendered? \u00b6 Chunky cannot currently render most entities. Entities are objects that are separate from the blocks that make up the Minecraft worlds, such as mobs, minecarts, projectiles, etc. Future support for rendering entities is planned, but there is no deadline for this feature yet, so stay tuned! For a list of what is supported check the article on Minecraft Compatibility . Can Chunky render custom block models and mod blocks? \u00b6 Support for custom block models and mod blocks is currently in development and the target is to have it ready for Chunky 2.5.0; as the name implies this would enable support for block models defined by json files. This feature may roll out as a plugin. Otherwise, for information on currently supported blocks check out the article on Minecraft Compatibility . Why does the sky look bad? \u00b6 You might have a low resolution skymap or it may be the wrong format. Chunky supports either panoramic equirectangular (360x90 or 360x180) and skyboxes (though we have support for spherical, it's unlikely you have one). Where can I find Skymaps? \u00b6 The Skymap page has some useful links for obtaining high quality skymaps. What about the 3rd Party Server Plugin? \u00b6 Chunky (SpigotMC) and Chunky Pregenerator is an unrelated project which has an unfortunate name collision (iirc, Chunky is (C) 2010 and the Pregenerator was made in 2020). Said plugin is used to pre-generate server chunks.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"Any question not answered here please ask on either our Discord server or on our Reddit community .","title":"Frequently Asked Questions"},{"location":"faq/#why-is-there-noisegrainrandom-bright-dots-in-the-render","text":"This is not a bug, but an unfortunate effect of the rendering algorithm used in Chunky. Torches and other small light sources cause a very random illumination and it takes a long time to render such light nicely. For more information please read the Path Tracing article . You can disable emitters under the Lighting tab in the Render Controls to remove most of the random bright dots. Other sources of light are typically larger and clear up quickly though HDRi skymaps can be an issue. Note that rendering for a longer time will eventually clear up the noise , though it may take a very long time. There are techniques and plugins which can help reduce noise. For more information please visit jackjt8's Guide to Chunky - Denoising .","title":"Why is there noise/grain/random bright dots in the render?"},{"location":"faq/#how-long-does-it-take-to-render-an-image","text":"There is no exact answer to this question. The main thing that affects render time is your CPU , the size of the image, and the lighting conditions in the scene you are rendering. It can take anywhere from an hour to a couple of days to render a nice image. You can reduce the size of the canvas, disable emitters, enable Emitter Sampling, or use a denoising technique to speed up the convergence rate. See the Path Tracing article or jackjt8's Guide to Chunky - Denoising for more details.","title":"How long does it take to render an image?"},{"location":"faq/#is-gpu-rendering-supported","text":"GPU rendering support is currently in development in the form of an OpenCL 1.2 renderer plugin. This renderer is still under development and many features of the CPU renderer are not yet supported. For more information check out the OpenCL plugin GitHub .","title":"Is GPU rendering supported?"},{"location":"faq/#how-do-i-pin-chunky-to-the-taskbar-create-shortcuts","text":"Unfortunately you cannot pin jar files in Windows. Though you can create a (bat)ch file which, not only can be double-clicked to launch Chunky, but a shortcut can be made of- Shortcuts can be pinned. To do this open Notepad, or equivalent software, and paste the following: java -jar %~dp0/ChunkyLauncher.jar Then press File > Save As . Navigate to the folder containing ChunkyLauncher.jar. For the file name it is up to you however you do need to change the extension to .bat (ie Chunky.bat ). From here you need to navigate to the newly created .bat file. Right-Click on the .bat file and select Create shortcut . This shortcut can be dragged onto the taskbar to pin it or moved to the desktop, etc.","title":"How do I pin Chunky to the taskbar / Create shortcuts?"},{"location":"faq/#why-are-mobs-not-rendered","text":"Chunky cannot currently render most entities. Entities are objects that are separate from the blocks that make up the Minecraft worlds, such as mobs, minecarts, projectiles, etc. Future support for rendering entities is planned, but there is no deadline for this feature yet, so stay tuned! For a list of what is supported check the article on Minecraft Compatibility .","title":"Why are mobs not rendered?"},{"location":"faq/#can-chunky-render-custom-block-models-and-mod-blocks","text":"Support for custom block models and mod blocks is currently in development and the target is to have it ready for Chunky 2.5.0; as the name implies this would enable support for block models defined by json files. This feature may roll out as a plugin. Otherwise, for information on currently supported blocks check out the article on Minecraft Compatibility .","title":"Can Chunky render custom block models and mod blocks?"},{"location":"faq/#why-does-the-sky-look-bad","text":"You might have a low resolution skymap or it may be the wrong format. Chunky supports either panoramic equirectangular (360x90 or 360x180) and skyboxes (though we have support for spherical, it's unlikely you have one).","title":"Why does the sky look bad?"},{"location":"faq/#where-can-i-find-skymaps","text":"The Skymap page has some useful links for obtaining high quality skymaps.","title":"Where can I find Skymaps?"},{"location":"faq/#what-about-the-3rd-party-server-plugin","text":"Chunky (SpigotMC) and Chunky Pregenerator is an unrelated project which has an unfortunate name collision (iirc, Chunky is (C) 2010 and the Pregenerator was made in 2020). Said plugin is used to pre-generate server chunks.","title":"What about the 3rd Party Server Plugin?"},{"location":"faq/minecraft_compatibility/","text":"Minecraft Compatibility \u00b6 Bedrock Edition worlds are not currently supported. Most entities are currently not rendered by Chunky, and some special blocks can not be rendered either. Here is a list of the supported Minecraft versions in addition to all the things that Chunky cannot render. For more detailed information about which features of what snapshot are not yet supported, check the issues with the minecraft label on GitHub. Feature Stable (2.4.2) Stable snapshot (2.4.3) Snapshot (2.5.0) Related issues Minecraft Java Versions 1.2.1 - 1.18 1.2.1 - 1.19 1.2.1 - 1.19 Vertical biomes Not supported Not supported Supported (off by default) #1225 Mod blocks Not supported Not supported Planned #88 , #426 , #266 Custom block models Not supported Not supported Planned #88 , #426 , #266 PBR textures Not supported Not supported Planned #751 , #1276 (Glow) Item frames Not supported Not supported Not supported #790 , #789 Held item rendering Not supported Not supported Not supported #669 , #595 Mobs (animals and monsters) Not supported Not supported Not supported #41 Ender crystals Not supported Not supported Not supported #41 Boats Not supported Not supported Not supported Minecarts Not supported Not supported Not supported Falling sand Not supported Not supported Not supported #454 Particles Not supported Not supported Not supported #41 Bubble columns Not supported Not supported Not supported #518 Campfire with items Not supported Not supported Not supported","title":"Minecraft compatibility"},{"location":"faq/minecraft_compatibility/#minecraft-compatibility","text":"Bedrock Edition worlds are not currently supported. Most entities are currently not rendered by Chunky, and some special blocks can not be rendered either. Here is a list of the supported Minecraft versions in addition to all the things that Chunky cannot render. For more detailed information about which features of what snapshot are not yet supported, check the issues with the minecraft label on GitHub. Feature Stable (2.4.2) Stable snapshot (2.4.3) Snapshot (2.5.0) Related issues Minecraft Java Versions 1.2.1 - 1.18 1.2.1 - 1.19 1.2.1 - 1.19 Vertical biomes Not supported Not supported Supported (off by default) #1225 Mod blocks Not supported Not supported Planned #88 , #426 , #266 Custom block models Not supported Not supported Planned #88 , #426 , #266 PBR textures Not supported Not supported Planned #751 , #1276 (Glow) Item frames Not supported Not supported Not supported #790 , #789 Held item rendering Not supported Not supported Not supported #669 , #595 Mobs (animals and monsters) Not supported Not supported Not supported #41 Ender crystals Not supported Not supported Not supported #41 Boats Not supported Not supported Not supported Minecarts Not supported Not supported Not supported Falling sand Not supported Not supported Not supported #454 Particles Not supported Not supported Not supported #41 Bubble columns Not supported Not supported Not supported #518 Campfire with items Not supported Not supported Not supported","title":"Minecraft Compatibility"},{"location":"faq/troubleshooting/","text":"Troubleshooting Chunky \u00b6 This page lists some common issues and how to fix them. Chunky opens as a blank window (Windows) \u00b6 If the Chunky or Chunky Launcher window is blank when you start it, this is caused by an issue in the JavaFX hardware renderer for Windows. The only known solution is to add -Dprism.order=sw to the Java command when starting Chunky. The option needs to be added in the Java options field in the launcher. Double-clicking ChunkyLauncher.jar doesn't work \u00b6 A common issue with Java on Windows is that jar files may not be correctly associated with Java. This can be fixed by either uninstalling and reinstalling Java or through using an application like Jarfix or through launching the Launcher via commandprompt, ie java -jar \"path\\to\\chunkylauncher\\chunkylauncher.jar\" . Using the latter solution you can create a batch file which is clickable. Exception in thread \"main\" java.lang.NoClassDefFoundError: javafx/stage/Stage \u00b6 JavaFX is only typically bundled with Oracle Java. On all OpenJDK/OpenJRE's you will need to manually download OpenJFX, extract it, and potentially launch Chunky Launcher and add to the Java Options field in the launcher: --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml 1 . For Windows we cover this under Universal JAR - Chunky Launcher For Linux try sudo apt install openjfx . Should this fail please follow the link above and proceed to download and extract the Linux x64 SDK from GluonHQ like with Windows. Valid locations are /usr/share/openjfx/lib , /usr/lib/jvm/java-<javaVersion>-openjdk , .chunky , or if the extracted folder contains javafx though this check is crude. Memory Limit won't go above 2Gb \u00b6 If you are not able to set the memory limit for Chunky greater than 2Gb, despite having more than 2Gb of RAM in your computer, then you need to upgrade to a 64-bit Java installation. A 32-bit Java installation does not allow more than 2Gb for the Chunky memory limit. If you try launching Chunky with more than 2Gb of memory in a 32-bit Java installation, you will get an error message similar to this: Check the debug console (enable it under Advanced Settings in the launcher): The line that says \"Could not reserve enough space for ... object heap\" indicates that the Java installation did not allow the configured memory limit. Map View Ocean / red X / Unsupported World/Chunks \u00b6 If you attempt to load an unsupported world in Chunky you may find that Map View displays the chunks as either an Ocean biome, if the Scale is set below 13, or as red X's. That means the world is not currently supported (in this version of Chunky). It is recommended to try updating Chunky, potentially to Stable Snapshot or Snapshot via Release Channels in the Launcher if the world is from a newer version of Minecraft. Otherwise, please refer to the issue tracker or our Discord server. Black blocks with a red X / Wrong Textures / Changing Texture Pack \u00b6 Chunky needs to load textures from a Minecraft installation or a resource pack, otherwise it uses its own built-in textures for the missing texture. If you get the wrong textures when you create a 3D scene, there are two things you can do: Update the path to your Minecraft installation in the Chunky launcher. Load a resource pack that contains the missing textures: See guide I try to create a new scene but it is empty \u00b6 First, make sure that you have selected some chunks before creating a new scene. If you still have the problem it may be caused by the Y min clip / Y max clip settings. The Y clip settings in the Render Controls pane under Scene can prevent the blocks from being loaded, especially if you are loading a superflat world. All blocks that have a Y value (height) outside the Y clip value will not be loaded. java.lang.NoSuchMethodError: javafx.scene.control.ChoiceBox.setOnAction(Ljavafx/event/EventHandler;) \u00b6 The setOnAction method was added to the ChoiceBox API starting from Java 8 update 60. It is recommended to at least update to 8u60 however 8u300+ would be most secure with Java 17 LTS recommended. Error initializing QuantumRenderer: no suitable pipeline found \u00b6 This typically occurs due to a mismatched Java - JavaFX architecture. Please ensure you are using x64-x64, etc. Try -Dprism.order=sw in the Java options field in the Launcher. Otherwise, launch Chunky with -Dprism.verbose=true in the Java options field while the Debug Console is enabled and the debug console will display valid pipelines. Search for Prism pipeline init order: for a list of valid pipelines. java.lang.NullPointerException: Cannot invoke \"com.sun.prism.RTTexture.createGraphics()\" because \" \" is null \u00b6 Try -Dprism.order=sw in the Java options field in the Launcher; Typically bypasses this issue at the cost of some responsiveness. This is issue is typically due to the Canvas size being increased and exceeding the maximum texture size supported by JavaFX, your GPU , or graphics driver. If launching Chunky with -Dprism.verbose=true in the Java options field, search for Maximum supported texture size: . Should be noted that the UI is also factored into this so your actual limit is dependent on the UI resolution. Rare bugs \u00b6 The section below is where we will be documenting rarer bugs that typically are not due to Chunky itself but other issues on your system. Given how rare these bugs are we have limited solutions available on how to resolve them. Font garbled/broken \u00b6 Potential fixes: 1) Use a dedicated GPU with java (Semi recommended) 2) Disable cleartype (Not recommended) - Makes all text look ugly but at least not broken 3) Update your graphics card driver (Best fix) 4) Fix (uninstall and reinstall) the Segoe UI font and/or any other broken fonts Graphics Device initialization failed for... \u00b6 Graphics Device initialization failed for : d3d, sw Error initializing QuantumRenderer: no suitable pipeline found Caused by: java.lang.RuntimeException: Error initializing QuantumRenderer: no suitable pipeline found at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.init(QuantumRenderer.java:95) at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:125) ... 1 more Potential causes: 1) Specified module path does not point to a valid javafx sdk 2) Mismatched JDK /JavaFX architectures (ie x86 and x64, aarm64 and x64, etc.) 3) Missing GTK2 on Linux 4) Try a differnt JDK like such as this one Problematic frame... \u00b6 Problematic frame: v ~StubRoutines::SafeFetchN This bug is in the Java issue tracker and will be fixed in 17.0.2. You may need to try a different JDK . Module jrt.fs conflict \u00b6 If you get the following error: java.lang.LayerInstantiationException: Package jdk.internal.jimage in both module java.base and module jrt.fs , open C:\\Program Files\\openjfx\\lib and delete jrt-fs.jar ; However this issue typically occurs if you merge OpenJFX's lib folder into your OpenJDK lib folder which you should NEVER do. Please install openjfx correctly. Important note that quotation marks \" \" need to be included surrounding any file paths to ensure that special characters like a hyphen, - , space, , etc. do not cause issues. \u21a9","title":"Troubleshooting"},{"location":"faq/troubleshooting/#troubleshooting-chunky","text":"This page lists some common issues and how to fix them.","title":"Troubleshooting Chunky"},{"location":"faq/troubleshooting/#chunky-opens-as-a-blank-window-windows","text":"If the Chunky or Chunky Launcher window is blank when you start it, this is caused by an issue in the JavaFX hardware renderer for Windows. The only known solution is to add -Dprism.order=sw to the Java command when starting Chunky. The option needs to be added in the Java options field in the launcher.","title":"Chunky opens as a blank window (Windows)"},{"location":"faq/troubleshooting/#double-clicking-chunkylauncherjar-doesnt-work","text":"A common issue with Java on Windows is that jar files may not be correctly associated with Java. This can be fixed by either uninstalling and reinstalling Java or through using an application like Jarfix or through launching the Launcher via commandprompt, ie java -jar \"path\\to\\chunkylauncher\\chunkylauncher.jar\" . Using the latter solution you can create a batch file which is clickable.","title":"Double-clicking ChunkyLauncher.jar doesn't work"},{"location":"faq/troubleshooting/#exception-in-thread-main-javalangnoclassdeffounderror-javafxstagestage","text":"JavaFX is only typically bundled with Oracle Java. On all OpenJDK/OpenJRE's you will need to manually download OpenJFX, extract it, and potentially launch Chunky Launcher and add to the Java Options field in the launcher: --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml 1 . For Windows we cover this under Universal JAR - Chunky Launcher For Linux try sudo apt install openjfx . Should this fail please follow the link above and proceed to download and extract the Linux x64 SDK from GluonHQ like with Windows. Valid locations are /usr/share/openjfx/lib , /usr/lib/jvm/java-<javaVersion>-openjdk , .chunky , or if the extracted folder contains javafx though this check is crude.","title":"Exception in thread \"main\" java.lang.NoClassDefFoundError: javafx/stage/Stage"},{"location":"faq/troubleshooting/#memory-limit-wont-go-above-2gb","text":"If you are not able to set the memory limit for Chunky greater than 2Gb, despite having more than 2Gb of RAM in your computer, then you need to upgrade to a 64-bit Java installation. A 32-bit Java installation does not allow more than 2Gb for the Chunky memory limit. If you try launching Chunky with more than 2Gb of memory in a 32-bit Java installation, you will get an error message similar to this: Check the debug console (enable it under Advanced Settings in the launcher): The line that says \"Could not reserve enough space for ... object heap\" indicates that the Java installation did not allow the configured memory limit.","title":"Memory Limit won't go above 2Gb"},{"location":"faq/troubleshooting/#map-view-ocean-red-x-unsupported-worldchunks","text":"If you attempt to load an unsupported world in Chunky you may find that Map View displays the chunks as either an Ocean biome, if the Scale is set below 13, or as red X's. That means the world is not currently supported (in this version of Chunky). It is recommended to try updating Chunky, potentially to Stable Snapshot or Snapshot via Release Channels in the Launcher if the world is from a newer version of Minecraft. Otherwise, please refer to the issue tracker or our Discord server.","title":"Map View Ocean / red X / Unsupported World/Chunks"},{"location":"faq/troubleshooting/#black-blocks-with-a-red-x-wrong-textures-changing-texture-pack","text":"Chunky needs to load textures from a Minecraft installation or a resource pack, otherwise it uses its own built-in textures for the missing texture. If you get the wrong textures when you create a 3D scene, there are two things you can do: Update the path to your Minecraft installation in the Chunky launcher. Load a resource pack that contains the missing textures: See guide","title":"Black blocks with a red X / Wrong Textures / Changing Texture Pack"},{"location":"faq/troubleshooting/#i-try-to-create-a-new-scene-but-it-is-empty","text":"First, make sure that you have selected some chunks before creating a new scene. If you still have the problem it may be caused by the Y min clip / Y max clip settings. The Y clip settings in the Render Controls pane under Scene can prevent the blocks from being loaded, especially if you are loading a superflat world. All blocks that have a Y value (height) outside the Y clip value will not be loaded.","title":"I try to create a new scene but it is empty"},{"location":"faq/troubleshooting/#javalangnosuchmethoderror-javafxscenecontrolchoiceboxsetonactionljavafxeventeventhandler","text":"The setOnAction method was added to the ChoiceBox API starting from Java 8 update 60. It is recommended to at least update to 8u60 however 8u300+ would be most secure with Java 17 LTS recommended.","title":"java.lang.NoSuchMethodError: javafx.scene.control.ChoiceBox.setOnAction(Ljavafx/event/EventHandler;)"},{"location":"faq/troubleshooting/#error-initializing-quantumrenderer-no-suitable-pipeline-found","text":"This typically occurs due to a mismatched Java - JavaFX architecture. Please ensure you are using x64-x64, etc. Try -Dprism.order=sw in the Java options field in the Launcher. Otherwise, launch Chunky with -Dprism.verbose=true in the Java options field while the Debug Console is enabled and the debug console will display valid pipelines. Search for Prism pipeline init order: for a list of valid pipelines.","title":"Error initializing QuantumRenderer: no suitable pipeline found"},{"location":"faq/troubleshooting/#javalangnullpointerexception-cannot-invoke-comsunprismrttexturecreategraphics-because-is-null","text":"Try -Dprism.order=sw in the Java options field in the Launcher; Typically bypasses this issue at the cost of some responsiveness. This is issue is typically due to the Canvas size being increased and exceeding the maximum texture size supported by JavaFX, your GPU , or graphics driver. If launching Chunky with -Dprism.verbose=true in the Java options field, search for Maximum supported texture size: . Should be noted that the UI is also factored into this so your actual limit is dependent on the UI resolution.","title":"java.lang.NullPointerException: Cannot invoke \"com.sun.prism.RTTexture.createGraphics()\" because \"\" is null"},{"location":"faq/troubleshooting/#rare-bugs","text":"The section below is where we will be documenting rarer bugs that typically are not due to Chunky itself but other issues on your system. Given how rare these bugs are we have limited solutions available on how to resolve them.","title":"Rare bugs"},{"location":"faq/troubleshooting/#font-garbledbroken","text":"Potential fixes: 1) Use a dedicated GPU with java (Semi recommended) 2) Disable cleartype (Not recommended) - Makes all text look ugly but at least not broken 3) Update your graphics card driver (Best fix) 4) Fix (uninstall and reinstall) the Segoe UI font and/or any other broken fonts","title":"Font garbled/broken"},{"location":"faq/troubleshooting/#graphics-device-initialization-failed-for","text":"Graphics Device initialization failed for : d3d, sw Error initializing QuantumRenderer: no suitable pipeline found Caused by: java.lang.RuntimeException: Error initializing QuantumRenderer: no suitable pipeline found at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.init(QuantumRenderer.java:95) at javafx.graphics/com.sun.javafx.tk.quantum.QuantumRenderer$PipelineRunnable.run(QuantumRenderer.java:125) ... 1 more Potential causes: 1) Specified module path does not point to a valid javafx sdk 2) Mismatched JDK /JavaFX architectures (ie x86 and x64, aarm64 and x64, etc.) 3) Missing GTK2 on Linux 4) Try a differnt JDK like such as this one","title":"Graphics Device initialization failed for..."},{"location":"faq/troubleshooting/#problematic-frame","text":"Problematic frame: v ~StubRoutines::SafeFetchN This bug is in the Java issue tracker and will be fixed in 17.0.2. You may need to try a different JDK .","title":"Problematic frame..."},{"location":"faq/troubleshooting/#module-jrtfs-conflict","text":"If you get the following error: java.lang.LayerInstantiationException: Package jdk.internal.jimage in both module java.base and module jrt.fs , open C:\\Program Files\\openjfx\\lib and delete jrt-fs.jar ; However this issue typically occurs if you merge OpenJFX's lib folder into your OpenJDK lib folder which you should NEVER do. Please install openjfx correctly. Important note that quotation marks \" \" need to be included surrounding any file paths to ensure that special characters like a hyphen, - , space, , etc. do not cause issues. \u21a9","title":"Module jrt.fs conflict"},{"location":"gallery/","text":"Click the images to view a larger version. \"Peek-a-boo!\" - Render by @boscawinks \"Brewing GUI XL\" - Render by @boscawinks \"Basalt Deltas be like\" - Render by @boscawinks \"A Minecraft-y Discworld\" - Render by @boscawinks \"Give that back!\" - Render by @boscawinks \"Jungle Garden\" - Render by ChomChom \"Northern Landscape\" - Render by Enzo_frsh \"Mini Biomes 01 - Plains\" - Render by Esorcism (MattWillen#1604) \"Mountain forest\" - Render by firehart \"NCC1701e\" - Render by jackjt8 - PMC map \"The Uncensored Library\" - Render by jackjt8 - Press freedom! \"Omni-directional mobility gear\" - Render by jackjt8 - PMC map 1 PMC map 2 \"New Mombasa, Kenya\" - Render by Jatizso \"Nova Celes City\" - Render by Jayjayli - PMC map \"Greenfield Sunset\" - Render by Jayjayli - PMC map \"Rainbow Corridor 2\" - Render by Jayjayli \"City of Plexia\" - Render by MadDog \"Terra Celestis\" - Render by OneCore - PMC \"Edge of a Dark Forest\" - Render by Peregrine05 \"Badlands\" - Render by Peregrine05 \"Misty Mountains\" - Render by Peregrine05 \"Mountain Lake\" - Render by Peregrine05 \"1.18 world\" - Render by Pylons \"Survival world\" - Render by Pylons \"\u03bd\u03b7\u03c3\u03af\" - Render by Pylons \"Space\" - Render by RavaPollo \"Pandas Gaze\" - Render by RavaPollo \"Coral Reef\" - Render by RavaPollo \"Greenfield - Minekea\" - Render by Redox - PMC map \"Midnight in Downtown\" - Render by u/Salamantic \"Distant Metropolis\" - Render by u/Salamantic \"Hong Kong's Luminosity\" - Render by u/Salamantic \"Chicago River\" - Render by u/Salamantic \"ARTHAS\" - Render by Sander Poelmans \"Arctic peak\" - Render by Sander Poelmans \"Land of plants\" - Render by Sander Poelmans \"Mountain castle \" - Render by Sander Poelmans \"Cyberpunk City 2\" - Render by SPAWNRYS - PMC map \"Titania City\" - Render by SPAWNRYS - PMC map \"Kremlin Alfedov | Mineshield: First Season\" - Render by SPAWNRYS \"DEB_Off | Mineshield: First Season\" - Render by SPAWNRYS \"Oldcraft | \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043f\u0430\u0432\u043d\" - Render by SPAWNRYS \"Kemono Friends - Serval\" - Render by SPAWNRYS - PMC map \"Ankha\" - Render by SPAWNRYS - PMC map \"Angela Balzac - Rakuen Tsuihou\" - Render by SPAWNRYS - PMC map \"\u0413\u043e\u0440\u043e\u0434 \u043a\u043b\u0430\u043d\u0430 Aqua (\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043e\u0442\u043e\u0432) | Subshield [Hills]\" - Render by SPAWNRYS \"City-17\" - Render by SPAWNRYS - PMC map \"Meridian\" - Render by Syphia - Map created by Tannatron and frostie \"Pumpkin Taiga\" - Render by Syphia \"Winter Ambience\" - Render by Zak Fynn Subreddit Old Chunky Gallery Want your renders featured?","title":"Gallery"},{"location":"gallery/old_gallery/","text":"Click the images to view a larger version. \"Vista\" \"Atmosphere effects, curtesy of 04hockey\" \"Atmosphere effects\" \"Broville (day)\" \"Broville (night)\" \"Broville\" \"Cornell Box\" \"Desert Port\" \"Parallel Projection\" \"Winter Resort\" \"Voyage\" \"Nether\" \"Hidden Valley\" \"Station\" Build Credits \u00b6 Builds used in the images on this page: Church built and rendered by 04hockey. Broville was built by Oldshoes. The space station was built by Urban Savage. Facebook , Twitter External Galleries \u00b6 Reddpics Gallery Renders by Oldshoes Render by Operation Infinite Ocean team (OIO) Return to Gallery","title":"Old Gallery (chunky.llbit.se)"},{"location":"gallery/old_gallery/#build-credits","text":"Builds used in the images on this page: Church built and rendered by 04hockey. Broville was built by Oldshoes. The space station was built by Urban Savage. Facebook , Twitter","title":"Build Credits"},{"location":"gallery/old_gallery/#external-galleries","text":"Reddpics Gallery Renders by Oldshoes Render by Operation Infinite Ocean team (OIO) Return to Gallery","title":"External Galleries"},{"location":"getting_started/","text":"Installing Chunky \u00b6 There are two ways to install Chunky. You may download the installer for your OS 1 , or you may download the Universal JAR (Chunky Launcher). Downloads \u00b6 Universal JAR Chunky Launcher v1.13.2 Universal JAR - Chunky Launcher - Setup \u00b6 Chunky requires at least 512MB of free RAM and 23MiB of free storage 5 . You must install Java 17 for your platform 4 . Download OpenJFX 18 x64 SDK for your platform 4 6 . Download the Universal JAR / Chunky Launcher (ChunkyLauncher.jar) and keep it in a safe place (you will use this to start Chunky). Windows \u00b6 4. Extract from the OpenJFX .zip the bin , legal , and lib folders to C:\\Program Files\\openjfx or ..\\.chunky\\openjfx , creating these folders if necessary. 5. Launch ChunkyLauncher.jar. You may need to launch via command line/script using java -jar \"path\\to\\ChunkyLauncher.jar\" --launcher . Linux \u00b6 4. Extract from the OpenJFX .zip the bin , legal , and lib folders to /javafx-sdk-17.0.1/ , creating these folders if necessary. 5. Launch ChunkyLauncher.jar. java --module-path javafx-sdk-17.0.1/lib --add-modules javafx.controls,javafx.fxml -jar launcher/ChunkyLauncher.jar macOS \u00b6 Notes - On M1 equipped macs, which are aarch64 (ARM based), Rosetta 2 enables an emulation, of sorts, of x64 macOS applications. Please ensure both JDK and OpenJFX have matching architectures. We recommended native aarch64 however x64 performance should be similar. Furthermore, there are many other issues and bugs that are difficult to resolve. Please ask for assistance and we will try our best. 4. Open the Terminal and run the following commands (while fixing the .zip name): mkdir ~/.chunky unzip ~/Downloads/openjfx-17.0.1_osx-aarch64_bin-sdk.zip -d ~/.chunky/javafx 5. Launch ChunkyLauncher.jar. java -jar ChunkyLauncher.jar (might be java -jar ~/Downloads/ChunkyLauncher.jar ) Chunky First-Time Setup \u00b6 The first time you start Chunky, you will be asked to pick a settings directory for Chunky: The recommended directory is usually the best option. Click \"Use Selected Directory\" to continue. Next, you will see the Chunky Launcher: If you downloaded the Universal JAR (only Chunky Launcher) then you will have to update Chunky, otherwise can click \"Launch\" to start Chunky. Updating Chunky \u00b6 In the launcher, hitting the \"Check for Update\" button will make the launcher check for an update to Chunky online. This must be done the first time you start Chunky if you only downloaded the launcher. If an update to Chunky is available you will soon see the \"Update Available!\" window: Click the \"Update to New Version\" button to start downloading the required files. When the download process has completed you can either click on \"Launch Chunky\" or \"Close\". If you click on \"Close\" you would need to click on \"Launch\" in the main Chunky Launcher window to launch Chunky. Snapshot builds \u00b6 By default, the launcher will download stable releases of Chunky. If you want to get the latest features and bug fixes (and maybe some new bugs or incomplete features), you can switch the \"Release channel\" under the \"Advanced Settings\" panel. The next time you check for updates, the launcher will download the latest Chunky snapshot. The snapshots are automatically built every day from the chunky-2.4.x and master branches. Some plugins may not work with Chunky snapshots while some plugins may even require a certain snapshot (or later versions). Troubleshooting \u00b6 If the launcher does not download the latest version or new snapshots, check the \"Update Site\" in the \"Advanced Settings\" panel. The URL changed with Chunky 2.1, so make sure it is set to https://chunkyupdate.lemaik.de/ . If you have used Chunky 1.x, it may still be set to llbit's update site. You can keep using that if you want to use Chunky 1.4.5 2 . If you get an unchecked exception caused by java.lang.NoClassDefFoundError: javafx/application/Application when launching Chunky Launcher use java --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml -jar \"path\\to\\ChunkyLauncher.jar\" to launch Chunky Launcher. If you get this exception when clicking \"Launch\" in the Chunky Launcher, double-check the Java Options field under Advanced is populated by --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml 3 . This field should automatically be populated. Installers for Windows, Linux and macOS are currently being worked on . \u21a9 As of Chunky 2.4.0, which supports Minecraft 1.2.1 (i.e. pre-flattening worlds), you probably don't need the old version anymore. \u21a9 Important note that quotation marks \" \" need to be included surrounding any file paths to ensure that special characters like a hyphen, - , space, , etc. do not cause issues. \u21a9 Ensure that the OS and Architecture correctly match your system. \u21a9 \u21a9 Bare minimum to run Chunky is Java 8 update 60, JavaFX, 512MB of free RAM , 100MiB of storage (for core files). \u21a9 We have not tested OpenJFX 19 at this time but it is assumed that it will work. \u21a9","title":"Installing Chunky"},{"location":"getting_started/#installing-chunky","text":"There are two ways to install Chunky. You may download the installer for your OS 1 , or you may download the Universal JAR (Chunky Launcher).","title":"Installing Chunky"},{"location":"getting_started/#downloads","text":"Universal JAR Chunky Launcher v1.13.2","title":"Downloads"},{"location":"getting_started/#universal-jar-chunky-launcher-setup","text":"Chunky requires at least 512MB of free RAM and 23MiB of free storage 5 . You must install Java 17 for your platform 4 . Download OpenJFX 18 x64 SDK for your platform 4 6 . Download the Universal JAR / Chunky Launcher (ChunkyLauncher.jar) and keep it in a safe place (you will use this to start Chunky).","title":"Universal JAR - Chunky Launcher - Setup"},{"location":"getting_started/#windows","text":"4. Extract from the OpenJFX .zip the bin , legal , and lib folders to C:\\Program Files\\openjfx or ..\\.chunky\\openjfx , creating these folders if necessary. 5. Launch ChunkyLauncher.jar. You may need to launch via command line/script using java -jar \"path\\to\\ChunkyLauncher.jar\" --launcher .","title":"Windows"},{"location":"getting_started/#linux","text":"4. Extract from the OpenJFX .zip the bin , legal , and lib folders to /javafx-sdk-17.0.1/ , creating these folders if necessary. 5. Launch ChunkyLauncher.jar. java --module-path javafx-sdk-17.0.1/lib --add-modules javafx.controls,javafx.fxml -jar launcher/ChunkyLauncher.jar","title":"Linux"},{"location":"getting_started/#macos","text":"Notes - On M1 equipped macs, which are aarch64 (ARM based), Rosetta 2 enables an emulation, of sorts, of x64 macOS applications. Please ensure both JDK and OpenJFX have matching architectures. We recommended native aarch64 however x64 performance should be similar. Furthermore, there are many other issues and bugs that are difficult to resolve. Please ask for assistance and we will try our best. 4. Open the Terminal and run the following commands (while fixing the .zip name): mkdir ~/.chunky unzip ~/Downloads/openjfx-17.0.1_osx-aarch64_bin-sdk.zip -d ~/.chunky/javafx 5. Launch ChunkyLauncher.jar. java -jar ChunkyLauncher.jar (might be java -jar ~/Downloads/ChunkyLauncher.jar )","title":"macOS"},{"location":"getting_started/#chunky-first-time-setup","text":"The first time you start Chunky, you will be asked to pick a settings directory for Chunky: The recommended directory is usually the best option. Click \"Use Selected Directory\" to continue. Next, you will see the Chunky Launcher: If you downloaded the Universal JAR (only Chunky Launcher) then you will have to update Chunky, otherwise can click \"Launch\" to start Chunky.","title":"Chunky First-Time Setup"},{"location":"getting_started/#updating-chunky","text":"In the launcher, hitting the \"Check for Update\" button will make the launcher check for an update to Chunky online. This must be done the first time you start Chunky if you only downloaded the launcher. If an update to Chunky is available you will soon see the \"Update Available!\" window: Click the \"Update to New Version\" button to start downloading the required files. When the download process has completed you can either click on \"Launch Chunky\" or \"Close\". If you click on \"Close\" you would need to click on \"Launch\" in the main Chunky Launcher window to launch Chunky.","title":"Updating Chunky"},{"location":"getting_started/#snapshot-builds","text":"By default, the launcher will download stable releases of Chunky. If you want to get the latest features and bug fixes (and maybe some new bugs or incomplete features), you can switch the \"Release channel\" under the \"Advanced Settings\" panel. The next time you check for updates, the launcher will download the latest Chunky snapshot. The snapshots are automatically built every day from the chunky-2.4.x and master branches. Some plugins may not work with Chunky snapshots while some plugins may even require a certain snapshot (or later versions).","title":"Snapshot builds"},{"location":"getting_started/#troubleshooting","text":"If the launcher does not download the latest version or new snapshots, check the \"Update Site\" in the \"Advanced Settings\" panel. The URL changed with Chunky 2.1, so make sure it is set to https://chunkyupdate.lemaik.de/ . If you have used Chunky 1.x, it may still be set to llbit's update site. You can keep using that if you want to use Chunky 1.4.5 2 . If you get an unchecked exception caused by java.lang.NoClassDefFoundError: javafx/application/Application when launching Chunky Launcher use java --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml -jar \"path\\to\\ChunkyLauncher.jar\" to launch Chunky Launcher. If you get this exception when clicking \"Launch\" in the Chunky Launcher, double-check the Java Options field under Advanced is populated by --module-path \"path\\to\\javafx\\lib\" --add-modules javafx.controls,javafx.fxml 3 . This field should automatically be populated. Installers for Windows, Linux and macOS are currently being worked on . \u21a9 As of Chunky 2.4.0, which supports Minecraft 1.2.1 (i.e. pre-flattening worlds), you probably don't need the old version anymore. \u21a9 Important note that quotation marks \" \" need to be included surrounding any file paths to ensure that special characters like a hyphen, - , space, , etc. do not cause issues. \u21a9 Ensure that the OS and Architecture correctly match your system. \u21a9 \u21a9 Bare minimum to run Chunky is Java 8 update 60, JavaFX, 512MB of free RAM , 100MiB of storage (for core files). \u21a9 We have not tested OpenJFX 19 at this time but it is assumed that it will work. \u21a9","title":"Troubleshooting"},{"location":"getting_started/configuration/","text":"Chunky Launcher \u00b6 Version select - Drop down list which allows you to pick a downloaded Chunky version. Check for update - Checks for updates on chosen update site. Minecraft directory - The directory Minecraft is installed to. Memory limit (MiB) - Default is 1024 MiB, however it is highly recommended that you raise this value to better reflect the amount of memory in your system. Please take into account that the OS and other applications will also require some memory so don't over set this. If you cannot raise this past 2000 MiB double-check your Java installation is 64 bit. Always open Launcher - Recommended you keep this checked. It is possible to access the launcher again via commandline or an option in Chunky, but it's a bit more hassle. Advanced Settings \u00b6 Update Site - Changes source for updates. http://chunkyupdate.llbit.se/ should be used to obtain Chunky 1.X which is up to Minecraft version 1.12.2. http://chunkyupdate2.llbit.se/ is for llbit's Chunky 2.0 for Minecraft 1.13 however you will need to enable snapshots to get the latest version, 2.0beta6 , else you will be stuck with an older version. http://chunkyupdate.lemaik.de/ is the new default update site for Chunky 2.X. Java Runtime - Allows you to see and change the Runtime used for Chunky. Does not change the runtime used for the Launcher. Java options - See below for the list of Java options. Chunky options - See below for the list of Chunky options. Enable debug console & Verbose logging - The debug console is a separate window that runs when you launch Chunky. As the name implies it is useful for debugging issues with Chunky and combined with Verbose logging, which enables additional debug information, can be helpful in fixing bugs and crashes. Close console when Chunky exits - Typically this can be left enabled. If an exception/error causes chunky to crash it should still be possible to read the console. Release channel - Allows you to select which type of release you would like to use. Stable is typically the most stable version. Stable Snapshot is like a beta release; Should be stable and can come with new features, bugs, and bug fixes. Snapshot is bleeding edge and probably unstable. Settings directory - Does not let you change the settings directory but does let you see/access it. Manage plugins - The Plugin manager can be used to manage installed plugins. For a list of available plugins and their function, please refer to the Plugins page . Java options \u00b6 -Dprism.order=sw - Should the Chunky Launcher or the Chunky window appear blank when started this is caused by an issue with the JavaFX hardware renderer for Windows. The only known solution is to add the listed Java command/option. This may reduce responsiveness over hw / d3d but that mode is limited by your GPU drivers maximum texture size. Use -Dprism.verbose=true to debug what pipelines are available. -Dprism.maxvram=512M - The texture cache defaults to 512M . Raising this value can allow you to render closer to the maximum texture size allowed in hardware modes but can also help resolve issues with the software mode. Can allocate using M or G suffixes. 1024M = 1G . -DlogLevel=INFO - ERROR , WARNING , INFO - Default is WARNING which will mean Chunky shows warnings for missing items. ERROR should disable missing item warnings. WIP PBR builds of Chunky have additional options required. These options may end up in the UI at a later point. -Dchunky.pbr.specular=labpbr - labpbr , oldpbr - Tells Chunky which format the specular map is in. -Dchunky.pbr.updateMaterialDefaults=true - Sets default materials to emittance=1, smoothness=0, metalness=1 such that the specular map is applied to all materials. -Dchunky.pbr.normal=true - Enables normal mapping on certain blocks (cubes with the same texture on each face) like wooden planks, cobblestone, stone bricks, etc. Chunky options \u00b6 -tile-width <NUM> - Modifies the frame subdivision size per worker thread. Can potentially provide a boost to render speed or, if set too high, reduce render speeds. It is recommended to use a tile-width of 16 as this seems to be optimal; though you may want to test your system in a typical workload to see what works better. -spp-per-pass <NUM> - The spp-per-pass defines how many samples a certain tile should be rendered to before moving onto the next tile. The default value of 1 would mean each tile would be sampled to the same SPP before incrementing further. This means that not only will the Preview Window display the most up-to-date SPP , but we are able to stop the render upon it completing queued samples for the pass- ie the SPP total will increment. Raising the spp-per-pass breaks a lot of GUI functionality however, due to a multitude of factors, rendering performance is improved. Recommended that you only use this option for headless operation.","title":"Configuring Chunky"},{"location":"getting_started/configuration/#chunky-launcher","text":"Version select - Drop down list which allows you to pick a downloaded Chunky version. Check for update - Checks for updates on chosen update site. Minecraft directory - The directory Minecraft is installed to. Memory limit (MiB) - Default is 1024 MiB, however it is highly recommended that you raise this value to better reflect the amount of memory in your system. Please take into account that the OS and other applications will also require some memory so don't over set this. If you cannot raise this past 2000 MiB double-check your Java installation is 64 bit. Always open Launcher - Recommended you keep this checked. It is possible to access the launcher again via commandline or an option in Chunky, but it's a bit more hassle.","title":"Chunky Launcher"},{"location":"getting_started/configuration/#advanced-settings","text":"Update Site - Changes source for updates. http://chunkyupdate.llbit.se/ should be used to obtain Chunky 1.X which is up to Minecraft version 1.12.2. http://chunkyupdate2.llbit.se/ is for llbit's Chunky 2.0 for Minecraft 1.13 however you will need to enable snapshots to get the latest version, 2.0beta6 , else you will be stuck with an older version. http://chunkyupdate.lemaik.de/ is the new default update site for Chunky 2.X. Java Runtime - Allows you to see and change the Runtime used for Chunky. Does not change the runtime used for the Launcher. Java options - See below for the list of Java options. Chunky options - See below for the list of Chunky options. Enable debug console & Verbose logging - The debug console is a separate window that runs when you launch Chunky. As the name implies it is useful for debugging issues with Chunky and combined with Verbose logging, which enables additional debug information, can be helpful in fixing bugs and crashes. Close console when Chunky exits - Typically this can be left enabled. If an exception/error causes chunky to crash it should still be possible to read the console. Release channel - Allows you to select which type of release you would like to use. Stable is typically the most stable version. Stable Snapshot is like a beta release; Should be stable and can come with new features, bugs, and bug fixes. Snapshot is bleeding edge and probably unstable. Settings directory - Does not let you change the settings directory but does let you see/access it. Manage plugins - The Plugin manager can be used to manage installed plugins. For a list of available plugins and their function, please refer to the Plugins page .","title":"Advanced Settings"},{"location":"getting_started/configuration/#java-options","text":"-Dprism.order=sw - Should the Chunky Launcher or the Chunky window appear blank when started this is caused by an issue with the JavaFX hardware renderer for Windows. The only known solution is to add the listed Java command/option. This may reduce responsiveness over hw / d3d but that mode is limited by your GPU drivers maximum texture size. Use -Dprism.verbose=true to debug what pipelines are available. -Dprism.maxvram=512M - The texture cache defaults to 512M . Raising this value can allow you to render closer to the maximum texture size allowed in hardware modes but can also help resolve issues with the software mode. Can allocate using M or G suffixes. 1024M = 1G . -DlogLevel=INFO - ERROR , WARNING , INFO - Default is WARNING which will mean Chunky shows warnings for missing items. ERROR should disable missing item warnings. WIP PBR builds of Chunky have additional options required. These options may end up in the UI at a later point. -Dchunky.pbr.specular=labpbr - labpbr , oldpbr - Tells Chunky which format the specular map is in. -Dchunky.pbr.updateMaterialDefaults=true - Sets default materials to emittance=1, smoothness=0, metalness=1 such that the specular map is applied to all materials. -Dchunky.pbr.normal=true - Enables normal mapping on certain blocks (cubes with the same texture on each face) like wooden planks, cobblestone, stone bricks, etc.","title":"Java options"},{"location":"getting_started/configuration/#chunky-options","text":"-tile-width <NUM> - Modifies the frame subdivision size per worker thread. Can potentially provide a boost to render speed or, if set too high, reduce render speeds. It is recommended to use a tile-width of 16 as this seems to be optimal; though you may want to test your system in a typical workload to see what works better. -spp-per-pass <NUM> - The spp-per-pass defines how many samples a certain tile should be rendered to before moving onto the next tile. The default value of 1 would mean each tile would be sampled to the same SPP before incrementing further. This means that not only will the Preview Window display the most up-to-date SPP , but we are able to stop the render upon it completing queued samples for the pass- ie the SPP total will increment. Raising the spp-per-pass breaks a lot of GUI functionality however, due to a multitude of factors, rendering performance is improved. Recommended that you only use this option for headless operation.","title":"Chunky options"},{"location":"getting_started/your_first_render/","text":"Your first render from start to finish \u00b6 Installation \u00b6 Please follow the Installation instructions . Chunky Launcher \u00b6 Chunky can use a lot of memory depending on a number of factors. Many issues can be caused by Chunky not having enough memory so raising the Memory limit (MiB) can solve these issues. The default 1024 can be raised based upon how much memory your system has and is typically available. ie - If your system has 16GiB or 16384MiB of system memory, allocating up to 75% which is 12GiB or 12288MiB is typically fine (you can allocate more however you may run into other problems). If your .minecraft is located in a directory other than where Chunky is expecting you may also need to change this as otherwise Chunky will not have textures. You should not need to access Advanced Settings. For now you can close Chunky/Chunky Launcher. Getting camera position \u00b6 This part is for taking an in-game view and rendering it out. Feel free to skip this part if you are more confident! Open Minecraft and a world you wish to render moving your player to where and what you wish to render, ensuring you are facing the direction too. Take note of the fields highlighted in red, we will need these to position the camera correctly within Chunky once converted. You can close your game. ie X = 32.2 ; Y = 71.7 ; Z = -232.7 ; Yaw = 67.5 ; Pitch = 8.2 (rounded to 1 DP) Selecting Chunks \u00b6 If Chunky isn't running go ahead and launch it. You should see something like this: Take note that the central pane under Map is white and black striped and over on the right panel, under Map View , Current World is blank. This indicates that no world is selected. Click on Change World to select or change the world. Once you have located the world, click on Load selected world . Select the correct dimension using the buttons in the right pane under Map View and then select the chunks you wish to render: Left click a chunk to select / unselect the chunk Shift click + drag to select a rectangular area Ctrl Shift click + drag to unselect a rectangular area Click and drag to pan around the world Zoom in and out using the scroll wheel Right click to access a few options Selecting fewer chunks can decrease rendering time, but they will be completely missing from the render. Try and only select what the camera can see! Setting up your render \u00b6 This part of the process is where you can customise settings to your heart's content. The guide will only cover the absolute basics, so it is recommended to experiment. Loading Chunks \u00b6 Either right click the 2D map located in the center pane and click on New scene from selection OR over in the left pane (Render Controls) under Scene click on Load selected chunks . After loading the selected chunks the central pane should auto switch to the Render Preview and the bottom progress bar should be filled. The time it takes to load increases with the number of chunks. A few settings to change... \u00b6 There are a few options under Scene you may wish to tweak: Canvas size is the aspect ratio and resolution you want the preview and the final render to be. Higher values take longer to render so using a lower resolution, like 960x540, can massively boost preview/test render performance (and the X2 button can double both axis up to 1920x1080). Save dump once every X is effectively an auto save feature. Chunky will not render while dumping so do not set this too low unless you believe your system is unstable. Load players may need to be disabled, and you might need to use Reload chunks , if you are going to match the camera positions to the in game one... Previewing \u00b6 Pressing Start and seeing what things look like is sometimes a good idea if only for a few seconds. You can always hit Reset and return to tweaking settings... Camera \u00b6 Next, hit the Camera tab. Click the Position and Orientation dropdown to expand it. Unfortunately you cannot just copy the values taken from the Minecraft F3 menu without a few tweaks first; There are some differences we need to account for. Below you can find a set of conversions: Camera X = mcX Camera Y = mcY + 1.62 Camera Z = mcZ Camera Yaw = 90 - mcYaw Camera Pitch = mcPtich - 90 Using the above conversions with our example we get the following: X = 32.2 ; Y = 73.2 ; Z = -232.7 ; Yaw = 22.5 ; Pitch = -81.8 Oh no! The camera is clipping into a player model! Either deselect Load players under Scene and then hit Reload chunks or you will most likely need to explore the Entities tab to remove the player... The default F ield o f V iew for Minecraft is 70 vertical. Assuming a 16:9 aspect ratio for both Minecraft and the canvas size, the default Chunky FoV should match the view with the standard projection. Dynamic FoV If dynamic FoV is enabled in Minecraft, flying in Minecraft will increase the FoV . Disable dynamic FoV to get the same FoV as in Chunky, assuming both FoV settings match. Lighting \u00b6 Head to the Lighting tab. From here you can adjust the amount of light the Sky, Emitters (torches, lava, etc.), and Sun produce. The default values should be perfect for daytime renders. Adjusting the Sun azimuth (yaw/rotation) and altitude (height) can change the scenes lighting drastically. Emitters will significantly increase render times, and require a much higher SPP to look smooth! Otherwise, you will have a lot of noise or \"fireflies\". For this example I will just set the sun altitude to 25. Sky and Fog \u00b6 Not too much to explain here. Sky mode lets you pick between simulated, solid or gradient colors, and Skymaps/cubes. The only thing here that you might need help with is Fog. There is an example fog density listed; tweak this and the fog color. Fog is noisy so expect longer render times. Water \u00b6 By default water will have a ripple effect applied to it. Water visibility impacts how far underwater you can see. Water opacity affects how transparent the water appears (0 for clear, 1 for solid). By default water color is biome tinted, but you can override this. Entities \u00b6 Feel free to adjust whatever you want in the entity tab. Press - to remove the entity from the render, and + to add new ones. Entities usually have a minimal effect on render times. Materials & Postprocessing tabs \u00b6 These tabs are not going to be covered in this guide. Explore and experiment on your own. Advanced \u00b6 Adjust CPU load and threads as you see fit. Chunky renders using solely CPU though a GPU rendering plugin is in development. If you plan to use your PC while it is rendering / have a weaker computer, reduce CPU load OR reduce threads as you see fit. Typically, reducing the number of threads that Chunky uses provides much more control over actual system usage. Be aware that lower CPU load / fewer threads can significantly increase render times! Set Ray Depth to whatever you want. 3-8 is usually good enough for most scenes. Increasing ray depth increases render times but improves accuracy and render quality; A balance is required. Click the Shutdown on render complete if you want your computer to shut down after the target SPP has been reached. If you are using linux, this option will have no effect unless you allow the shutdown command to run without needing sudo as the command requires sudo permissions. For obvious reasons, Chunky won't store your sudo password for when it's time to execute the command x). You can find a guide on the internet fairly easily for allowing the shutdown command to run without sudo . You may wish to change the image Output mode here too. Just before we render \u00b6 Set the target SPP to whatever you want. SPP means samples per pixel. Lower SPPs will be reached sooner but may have more noise/grain/fireflies. A higher SPP will take longer to reach but the image will be cleaner. Typically, 32-1024 SPP is good for daylight renders without emitters (torches, lava, glowstone, etc.) enabled. 4096-16384 SPP is good for daylight renders with emitters. 16384+ SPP for night time renders or indoor renders with emitters. Save the scene \u00b6 In the top left, change the scene name to something more reasonable, hit the save icon (the blue file icon). Should you wish to load a scene you can click on the final icon (blue file with green arrow). Render \u00b6 When you are ready, hit Start , and wait for your beautiful image to be produced! This could take anywhere between two minutes and two years. Sit tight! Should you need to stop at any point hit Pause , wait for CPU usage to dip down to idle, and then hit Save before you close. Failure to do so can lead to loss progress (if not saving dumps frequently). Profit! \u00b6 You can either use Save current frame or Copy current frame at any point (any SPP ) to get your render. Or probably best to get the finished render from (assuming default locations): Windows: C:\\Users\\ .chunky\\scenes\\scene_name\\snapshots Linux: /home/.chunky/scenes/scene_name/snapshots Alternatively, on the right pane under Options click on Open Scenes Directory . Below you can see the finished product of this guide with a few minor tweaks to the Sky simulation, the addition of fog, lighting intensities and color, and the water. This guide was adapted and updated from a guide by EmeraldSnorlax.","title":"Your First Render"},{"location":"getting_started/your_first_render/#your-first-render-from-start-to-finish","text":"","title":"Your first render from start to finish"},{"location":"getting_started/your_first_render/#installation","text":"Please follow the Installation instructions .","title":"Installation"},{"location":"getting_started/your_first_render/#chunky-launcher","text":"Chunky can use a lot of memory depending on a number of factors. Many issues can be caused by Chunky not having enough memory so raising the Memory limit (MiB) can solve these issues. The default 1024 can be raised based upon how much memory your system has and is typically available. ie - If your system has 16GiB or 16384MiB of system memory, allocating up to 75% which is 12GiB or 12288MiB is typically fine (you can allocate more however you may run into other problems). If your .minecraft is located in a directory other than where Chunky is expecting you may also need to change this as otherwise Chunky will not have textures. You should not need to access Advanced Settings. For now you can close Chunky/Chunky Launcher.","title":"Chunky Launcher"},{"location":"getting_started/your_first_render/#getting-camera-position","text":"This part is for taking an in-game view and rendering it out. Feel free to skip this part if you are more confident! Open Minecraft and a world you wish to render moving your player to where and what you wish to render, ensuring you are facing the direction too. Take note of the fields highlighted in red, we will need these to position the camera correctly within Chunky once converted. You can close your game. ie X = 32.2 ; Y = 71.7 ; Z = -232.7 ; Yaw = 67.5 ; Pitch = 8.2 (rounded to 1 DP)","title":"Getting camera position"},{"location":"getting_started/your_first_render/#selecting-chunks","text":"If Chunky isn't running go ahead and launch it. You should see something like this: Take note that the central pane under Map is white and black striped and over on the right panel, under Map View , Current World is blank. This indicates that no world is selected. Click on Change World to select or change the world. Once you have located the world, click on Load selected world . Select the correct dimension using the buttons in the right pane under Map View and then select the chunks you wish to render: Left click a chunk to select / unselect the chunk Shift click + drag to select a rectangular area Ctrl Shift click + drag to unselect a rectangular area Click and drag to pan around the world Zoom in and out using the scroll wheel Right click to access a few options Selecting fewer chunks can decrease rendering time, but they will be completely missing from the render. Try and only select what the camera can see!","title":"Selecting Chunks"},{"location":"getting_started/your_first_render/#setting-up-your-render","text":"This part of the process is where you can customise settings to your heart's content. The guide will only cover the absolute basics, so it is recommended to experiment.","title":"Setting up your render"},{"location":"getting_started/your_first_render/#loading-chunks","text":"Either right click the 2D map located in the center pane and click on New scene from selection OR over in the left pane (Render Controls) under Scene click on Load selected chunks . After loading the selected chunks the central pane should auto switch to the Render Preview and the bottom progress bar should be filled. The time it takes to load increases with the number of chunks.","title":"Loading Chunks"},{"location":"getting_started/your_first_render/#a-few-settings-to-change","text":"There are a few options under Scene you may wish to tweak: Canvas size is the aspect ratio and resolution you want the preview and the final render to be. Higher values take longer to render so using a lower resolution, like 960x540, can massively boost preview/test render performance (and the X2 button can double both axis up to 1920x1080). Save dump once every X is effectively an auto save feature. Chunky will not render while dumping so do not set this too low unless you believe your system is unstable. Load players may need to be disabled, and you might need to use Reload chunks , if you are going to match the camera positions to the in game one...","title":"A few settings to change..."},{"location":"getting_started/your_first_render/#previewing","text":"Pressing Start and seeing what things look like is sometimes a good idea if only for a few seconds. You can always hit Reset and return to tweaking settings...","title":"Previewing"},{"location":"getting_started/your_first_render/#camera","text":"Next, hit the Camera tab. Click the Position and Orientation dropdown to expand it. Unfortunately you cannot just copy the values taken from the Minecraft F3 menu without a few tweaks first; There are some differences we need to account for. Below you can find a set of conversions: Camera X = mcX Camera Y = mcY + 1.62 Camera Z = mcZ Camera Yaw = 90 - mcYaw Camera Pitch = mcPtich - 90 Using the above conversions with our example we get the following: X = 32.2 ; Y = 73.2 ; Z = -232.7 ; Yaw = 22.5 ; Pitch = -81.8 Oh no! The camera is clipping into a player model! Either deselect Load players under Scene and then hit Reload chunks or you will most likely need to explore the Entities tab to remove the player... The default F ield o f V iew for Minecraft is 70 vertical. Assuming a 16:9 aspect ratio for both Minecraft and the canvas size, the default Chunky FoV should match the view with the standard projection. Dynamic FoV If dynamic FoV is enabled in Minecraft, flying in Minecraft will increase the FoV . Disable dynamic FoV to get the same FoV as in Chunky, assuming both FoV settings match.","title":"Camera"},{"location":"getting_started/your_first_render/#lighting","text":"Head to the Lighting tab. From here you can adjust the amount of light the Sky, Emitters (torches, lava, etc.), and Sun produce. The default values should be perfect for daytime renders. Adjusting the Sun azimuth (yaw/rotation) and altitude (height) can change the scenes lighting drastically. Emitters will significantly increase render times, and require a much higher SPP to look smooth! Otherwise, you will have a lot of noise or \"fireflies\". For this example I will just set the sun altitude to 25.","title":"Lighting"},{"location":"getting_started/your_first_render/#sky-and-fog","text":"Not too much to explain here. Sky mode lets you pick between simulated, solid or gradient colors, and Skymaps/cubes. The only thing here that you might need help with is Fog. There is an example fog density listed; tweak this and the fog color. Fog is noisy so expect longer render times.","title":"Sky and Fog"},{"location":"getting_started/your_first_render/#water","text":"By default water will have a ripple effect applied to it. Water visibility impacts how far underwater you can see. Water opacity affects how transparent the water appears (0 for clear, 1 for solid). By default water color is biome tinted, but you can override this.","title":"Water"},{"location":"getting_started/your_first_render/#entities","text":"Feel free to adjust whatever you want in the entity tab. Press - to remove the entity from the render, and + to add new ones. Entities usually have a minimal effect on render times.","title":"Entities"},{"location":"getting_started/your_first_render/#materials-postprocessing-tabs","text":"These tabs are not going to be covered in this guide. Explore and experiment on your own.","title":"Materials &amp; Postprocessing tabs"},{"location":"getting_started/your_first_render/#advanced","text":"Adjust CPU load and threads as you see fit. Chunky renders using solely CPU though a GPU rendering plugin is in development. If you plan to use your PC while it is rendering / have a weaker computer, reduce CPU load OR reduce threads as you see fit. Typically, reducing the number of threads that Chunky uses provides much more control over actual system usage. Be aware that lower CPU load / fewer threads can significantly increase render times! Set Ray Depth to whatever you want. 3-8 is usually good enough for most scenes. Increasing ray depth increases render times but improves accuracy and render quality; A balance is required. Click the Shutdown on render complete if you want your computer to shut down after the target SPP has been reached. If you are using linux, this option will have no effect unless you allow the shutdown command to run without needing sudo as the command requires sudo permissions. For obvious reasons, Chunky won't store your sudo password for when it's time to execute the command x). You can find a guide on the internet fairly easily for allowing the shutdown command to run without sudo . You may wish to change the image Output mode here too.","title":"Advanced"},{"location":"getting_started/your_first_render/#just-before-we-render","text":"Set the target SPP to whatever you want. SPP means samples per pixel. Lower SPPs will be reached sooner but may have more noise/grain/fireflies. A higher SPP will take longer to reach but the image will be cleaner. Typically, 32-1024 SPP is good for daylight renders without emitters (torches, lava, glowstone, etc.) enabled. 4096-16384 SPP is good for daylight renders with emitters. 16384+ SPP for night time renders or indoor renders with emitters.","title":"Just before we render"},{"location":"getting_started/your_first_render/#save-the-scene","text":"In the top left, change the scene name to something more reasonable, hit the save icon (the blue file icon). Should you wish to load a scene you can click on the final icon (blue file with green arrow).","title":"Save the scene"},{"location":"getting_started/your_first_render/#render","text":"When you are ready, hit Start , and wait for your beautiful image to be produced! This could take anywhere between two minutes and two years. Sit tight! Should you need to stop at any point hit Pause , wait for CPU usage to dip down to idle, and then hit Save before you close. Failure to do so can lead to loss progress (if not saving dumps frequently).","title":"Render"},{"location":"getting_started/your_first_render/#profit","text":"You can either use Save current frame or Copy current frame at any point (any SPP ) to get your render. Or probably best to get the finished render from (assuming default locations): Windows: C:\\Users\\ .chunky\\scenes\\scene_name\\snapshots Linux: /home/.chunky/scenes/scene_name/snapshots Alternatively, on the right pane under Options click on Open Scenes Directory . Below you can see the finished product of this guide with a few minor tweaks to the Sky simulation, the addition of fog, lighting intensities and color, and the water. This guide was adapted and updated from a guide by EmeraldSnorlax.","title":"Profit!"},{"location":"license/","text":"License \u00b6 Chunky itself is released under the GNU General Public License v3.0 . Except where otherwise noted, the content of the Chunky Manual is available under a Create Commons Attribution-NonCommercial-ShareAlike 4.0 International license. When sharing parts of the manual, please attribute the \"Chunky Documentation Team\" and include a link to this manual.","title":"License"},{"location":"license/#license","text":"Chunky itself is released under the GNU General Public License v3.0 . Except where otherwise noted, the content of the Chunky Manual is available under a Create Commons Attribution-NonCommercial-ShareAlike 4.0 International license. When sharing parts of the manual, please attribute the \"Chunky Documentation Team\" and include a link to this manual.","title":"License"},{"location":"plugins/","text":"Chunky Plugins \u00b6 Chunky can be extended with plugins, e.g. to add new blocks, post processors or even add all new renderer implementations. Get plugins Renderer switching in Chunky 2.4.0 or later As of Chunky 2.4.0 renderer switching is supported. ChunkyClPlugin\u2019s ChunkyCLRenderer cannot yet be selected to be used in conjunction with the Denoising Plugin though they won\u2019t cause an exception anymore. Plugins which have not yet been updated to support the new addRenderer API feature (Ambient Occlusion Plugin and Depth Buffer Plugin) are still supported and are added with the name of PluginRenderer . Installation \u00b6 Plugins are often distributed as .jar files, and sometimes are contained within a .zip archive, and can be loaded in Chunky via the Plugin Manager . To install plugins, click on Manage Plugins within the Chunky Launcher to open the Plugin Manager . Clicking on Open plugin directory will create a plugins folder within the Chunky settings directory. Plugins can be added by first either copying or extracting them to the plugins directory and then by selecting the plugin and clicking on the Add button within the Plugin Manager . Plugins are loaded from top to bottom. The loading order usually doesn't matter but can fix incompatibilities in some cases. Consult the documentation of the plugins you're using for further information.","title":"Getting started"},{"location":"plugins/#chunky-plugins","text":"Chunky can be extended with plugins, e.g. to add new blocks, post processors or even add all new renderer implementations. Get plugins Renderer switching in Chunky 2.4.0 or later As of Chunky 2.4.0 renderer switching is supported. ChunkyClPlugin\u2019s ChunkyCLRenderer cannot yet be selected to be used in conjunction with the Denoising Plugin though they won\u2019t cause an exception anymore. Plugins which have not yet been updated to support the new addRenderer API feature (Ambient Occlusion Plugin and Depth Buffer Plugin) are still supported and are added with the name of PluginRenderer .","title":"Chunky Plugins"},{"location":"plugins/#installation","text":"Plugins are often distributed as .jar files, and sometimes are contained within a .zip archive, and can be loaded in Chunky via the Plugin Manager . To install plugins, click on Manage Plugins within the Chunky Launcher to open the Plugin Manager . Clicking on Open plugin directory will create a plugins folder within the Chunky settings directory. Plugins can be added by first either copying or extracting them to the plugins directory and then by selecting the plugin and clicking on the Add button within the Plugin Manager . Plugins are loaded from top to bottom. The loading order usually doesn't matter but can fix incompatibilities in some cases. Consult the documentation of the plugins you're using for further information.","title":"Installation"},{"location":"plugins/development/","text":"Plugin development \u00b6 A good way to start developing plugins is to take a look at the source code of existing plugins to dive into Chunky's plugin API. Interfaces and methods that are considered stable for plugin use are annotated with the @PluginApi annotation in Chunky's code. If you have questions about the API or need any help, the #tech channel on our Discord server is a good place to start. Gradle configuration \u00b6 To build a plugin for Chunky, you need, well, Chunky. More precisely, chunky-core is needed as a dependency 1 in order to build the plugin (and also provide you code completion and javadoc). We recommend using Gradle, and a simple build.gradle config for a plugin could look like this: apply plugin: 'java' compileJava { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } repositories { mavenLocal () mavenCentral () maven { url 'https://repo.lemaik.de/' } } dependencies { compileOnly 'se.llbit:chunky-core:2.4.0' } Plugin manifest \u00b6 Similar to Bukkit plugins, Chunky plugins contain a manifest file that contains information about the plugin name, version and, most importantly, which class of it Chunky should load. This file must be named plugin.json and be located at the root of the plugin jar file. { \"name\" : \"Demo Plugin\" , \"author\" : \"You\" , \"main\" : \"com.example.chunkydemoplugin.DemoPlugin\" , \"version\" : \"1.0\" , \"targetVersion\" : \"2.4.0\" , \"description\" : \"A demo plugin.\" } The fields should be pretty self-explaining. The targetVersion is the version of Chunky that your plugin supports 2 . If any other Chunky version is used, a warning will be printed to the console to notify the user (but Chunky will still try to load the plugin). The fully-qualified class name in main is the main class of your plugin, which must implement the se.llbit.chunky.Plugin interface. Plugin entrypoint \u00b6 For the demo plugin, the implementation could look like this. Note how the class name and package correspond to the main value from the manifest: package com.example.chunkydemoplugin ; import se.llbit.chunky.Plugin ; import se.llbit.chunky.main.Chunky ; import se.llbit.chunky.main.ChunkyOptions ; import se.llbit.chunky.ui.ChunkyFx ; public class DemoPlugin implements Plugin { @Override public void attach ( Chunky chunky ) { // TODO add your plugin functionality here } public static void main ( String [] args ) throws Exception { // Start Chunky with this plugin attached Chunky . loadDefaultTextures (); Chunky chunky = new Chunky ( ChunkyOptions . getDefaults ()); new DemoPlugin (). attach ( chunky ); ChunkyFx . startChunkyUI ( chunky ); } } About the main method The main method is added only for convenience. This way, you can launch Chunky with this plugin enabled directly from within your IDE, which is also useful for attaching a debugger. When loading a plugin from a jar, Chunky will create an instance of the plugin class and invoke the attach method. You should put all plugin initialization logic there. Demo plugins \u00b6 To demonstrate some features of the Plugin API, llbit created a few demo plugins. Ambient Occlusion Plugin Depth Buffer Plugin Block Plugin Template Tab Plugin Template leMaik's Maven repository contains all release builds of Chunky starting with 2.3.0 as well as the nightly builds as maven snapshots. \u21a9 Chunky doesn't support range checks yet but may add them in the future. That would allow you to specify e.g. >= 2.4.0 for compatibility with 2.4.0 or later. \u21a9","title":"Plugin development"},{"location":"plugins/development/#plugin-development","text":"A good way to start developing plugins is to take a look at the source code of existing plugins to dive into Chunky's plugin API. Interfaces and methods that are considered stable for plugin use are annotated with the @PluginApi annotation in Chunky's code. If you have questions about the API or need any help, the #tech channel on our Discord server is a good place to start.","title":"Plugin development"},{"location":"plugins/development/#gradle-configuration","text":"To build a plugin for Chunky, you need, well, Chunky. More precisely, chunky-core is needed as a dependency 1 in order to build the plugin (and also provide you code completion and javadoc). We recommend using Gradle, and a simple build.gradle config for a plugin could look like this: apply plugin: 'java' compileJava { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } repositories { mavenLocal () mavenCentral () maven { url 'https://repo.lemaik.de/' } } dependencies { compileOnly 'se.llbit:chunky-core:2.4.0' }","title":"Gradle configuration"},{"location":"plugins/development/#plugin-manifest","text":"Similar to Bukkit plugins, Chunky plugins contain a manifest file that contains information about the plugin name, version and, most importantly, which class of it Chunky should load. This file must be named plugin.json and be located at the root of the plugin jar file. { \"name\" : \"Demo Plugin\" , \"author\" : \"You\" , \"main\" : \"com.example.chunkydemoplugin.DemoPlugin\" , \"version\" : \"1.0\" , \"targetVersion\" : \"2.4.0\" , \"description\" : \"A demo plugin.\" } The fields should be pretty self-explaining. The targetVersion is the version of Chunky that your plugin supports 2 . If any other Chunky version is used, a warning will be printed to the console to notify the user (but Chunky will still try to load the plugin). The fully-qualified class name in main is the main class of your plugin, which must implement the se.llbit.chunky.Plugin interface.","title":"Plugin manifest"},{"location":"plugins/development/#plugin-entrypoint","text":"For the demo plugin, the implementation could look like this. Note how the class name and package correspond to the main value from the manifest: package com.example.chunkydemoplugin ; import se.llbit.chunky.Plugin ; import se.llbit.chunky.main.Chunky ; import se.llbit.chunky.main.ChunkyOptions ; import se.llbit.chunky.ui.ChunkyFx ; public class DemoPlugin implements Plugin { @Override public void attach ( Chunky chunky ) { // TODO add your plugin functionality here } public static void main ( String [] args ) throws Exception { // Start Chunky with this plugin attached Chunky . loadDefaultTextures (); Chunky chunky = new Chunky ( ChunkyOptions . getDefaults ()); new DemoPlugin (). attach ( chunky ); ChunkyFx . startChunkyUI ( chunky ); } } About the main method The main method is added only for convenience. This way, you can launch Chunky with this plugin enabled directly from within your IDE, which is also useful for attaching a debugger. When loading a plugin from a jar, Chunky will create an instance of the plugin class and invoke the attach method. You should put all plugin initialization logic there.","title":"Plugin entrypoint"},{"location":"plugins/development/#demo-plugins","text":"To demonstrate some features of the Plugin API, llbit created a few demo plugins. Ambient Occlusion Plugin Depth Buffer Plugin Block Plugin Template Tab Plugin Template leMaik's Maven repository contains all release builds of Chunky starting with 2.3.0 as well as the nightly builds as maven snapshots. \u21a9 Chunky doesn't support range checks yet but may add them in the future. That would allow you to specify e.g. >= 2.4.0 for compatibility with 2.4.0 or later. \u21a9","title":"Demo plugins"},{"location":"plugins/plugins/","text":"Plugin List \u00b6 Below is a list of known plugins. If a plugin is missing, feel free to add it to this page by submitting a PR with all the required information. Animation Plugin \u00b6 Redox \u00b7 GitHub Repository \u00b7 Latest build from master Adds functionality to render an animation without completely reloading the scene on every frame. Has a Keyframe Editor tab which lets you create and edit keyframes or an option to load .json files from a folder. Bloom Plugin \u00b6 aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds a bloom post-processing filter. BVH Plugin \u00b6 aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds additional BVH 's to Chunky. Denoising Plugin \u00b6 leMaik \u00b7 GitHub Repository \u00b7 Releases An AI denoiser using Intel Open Image Denoise. Very effective at reducing noise and can be used to effectively cut render times by orders of magnitude. Installation Download the release version of the denoiser .jar from the GitHub Repo for the version of Chunky you have. Version Plugin Version Plugin File Chunky 2.4+ v0.4.0 chunky-denoiser.jar Chunky 2.0-2.3 v0.3.2 chunky-denoiser-chunky2.jar Chunky 1 v0.3.2 chunky-denoiser-chunky1.jar Download the Precompiled Intel Open Image Denoise Binary Packages for your OS. (ie for Windows it would be oidn-1.4.1.x64.vc14.windows.zip ) Extract the oidn .zip file to a chosen location. (ie C:\\Program Files\\oidn-1.4.1.x64.vc14.windows\\... ) Add and enable the denoising plugin .jar in Chunky. After launching Chunky, a new Denoiser tab will be found among the render controls. Expand this tab, next to the Denoiser there will be a button ... clicking this will open a file selector. Navigate to the installation location and then into bin and select oidnDenoise.exe . The full path to the Denoiser would be displayed in the text field. For this example it would be: C:\\Program Files\\oidn-1.4.1.x64.vc14.windows\\bin\\oidnDenoise.exe Render normally! Profit! The Denoising Plugin with render the Normal and Albedo Map before the Noisy image. Once the Target SPP is reached the image will be denoised and saved into snapshots with the extension *.denoised.* . You can also find the original .pfm files in the scenes' directory should you wish to use these for anything. Discord Rich Presence \u00b6 leMaik \u00b7 GitHub Repository \u00b7 Releases Adds Discord rich presence integration to Chunky. Make sure this plugin is loaded after other plugins that change the render manager. Excel Plugin \u00b6 aTom3333 \u00b7 GitHub Repository \u00b7 Releases Exports renders as ODS such that an image viewer like Excel can render it. JPEGXL Plugin \u00b6 aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds a JPEG -XL Output mode. Magick Export Plugin \u00b6 ShirleyNeko \u00b7 GitHub Repository \u00b7 Releases A Work-In-Progress plugin that adds more render Output modes (ie OpenEXR, PNG16, etc.) using ImageMagick or GraphicsMagick. Octree Plugin \u00b6 aTom3333 \u00b7 GitHub Repository \u00b7 Releases This is a plugin for Chunky that adds more octree implementations with a range of uses and benefits. See the GitHub repository for more information and use. Notable implementations: Disk Implementation - Caches octree to disk. Extremely slow compared to other octree implementations but bypasses memory limits when loading large worlds. Garbage-collected Implementation - Generally faster octree creation / loading times. Higher peak memory usages. Dictionary Implementation - Lower memory usage than PACKED . Slightly slower while rendering and loading. Small DAG Implementation - Even lower memory usage than DICTIONARY . Slightly slower while rendering and loading. A few more options are available but not listed. OpenCL Plugin \u00b6 Redox \u00b7 GitHub Repository \u00b7 Releases A WIP OpenCL raytracer for Chunky. Not all blocks and features are supported. Experimental This plugin is in early beta state and does not support all Chunky features yet.","title":"Plugins"},{"location":"plugins/plugins/#plugin-list","text":"Below is a list of known plugins. If a plugin is missing, feel free to add it to this page by submitting a PR with all the required information.","title":"Plugin List"},{"location":"plugins/plugins/#animation-plugin","text":"Redox \u00b7 GitHub Repository \u00b7 Latest build from master Adds functionality to render an animation without completely reloading the scene on every frame. Has a Keyframe Editor tab which lets you create and edit keyframes or an option to load .json files from a folder.","title":"Animation Plugin"},{"location":"plugins/plugins/#bloom-plugin","text":"aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds a bloom post-processing filter.","title":"Bloom Plugin"},{"location":"plugins/plugins/#bvh-plugin","text":"aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds additional BVH 's to Chunky.","title":"BVH Plugin"},{"location":"plugins/plugins/#denoising-plugin","text":"leMaik \u00b7 GitHub Repository \u00b7 Releases An AI denoiser using Intel Open Image Denoise. Very effective at reducing noise and can be used to effectively cut render times by orders of magnitude. Installation Download the release version of the denoiser .jar from the GitHub Repo for the version of Chunky you have. Version Plugin Version Plugin File Chunky 2.4+ v0.4.0 chunky-denoiser.jar Chunky 2.0-2.3 v0.3.2 chunky-denoiser-chunky2.jar Chunky 1 v0.3.2 chunky-denoiser-chunky1.jar Download the Precompiled Intel Open Image Denoise Binary Packages for your OS. (ie for Windows it would be oidn-1.4.1.x64.vc14.windows.zip ) Extract the oidn .zip file to a chosen location. (ie C:\\Program Files\\oidn-1.4.1.x64.vc14.windows\\... ) Add and enable the denoising plugin .jar in Chunky. After launching Chunky, a new Denoiser tab will be found among the render controls. Expand this tab, next to the Denoiser there will be a button ... clicking this will open a file selector. Navigate to the installation location and then into bin and select oidnDenoise.exe . The full path to the Denoiser would be displayed in the text field. For this example it would be: C:\\Program Files\\oidn-1.4.1.x64.vc14.windows\\bin\\oidnDenoise.exe Render normally! Profit! The Denoising Plugin with render the Normal and Albedo Map before the Noisy image. Once the Target SPP is reached the image will be denoised and saved into snapshots with the extension *.denoised.* . You can also find the original .pfm files in the scenes' directory should you wish to use these for anything.","title":"Denoising Plugin"},{"location":"plugins/plugins/#discord-rich-presence","text":"leMaik \u00b7 GitHub Repository \u00b7 Releases Adds Discord rich presence integration to Chunky. Make sure this plugin is loaded after other plugins that change the render manager.","title":"Discord Rich Presence"},{"location":"plugins/plugins/#excel-plugin","text":"aTom3333 \u00b7 GitHub Repository \u00b7 Releases Exports renders as ODS such that an image viewer like Excel can render it.","title":"Excel Plugin"},{"location":"plugins/plugins/#jpegxl-plugin","text":"aTom3333 \u00b7 GitHub Repository \u00b7 Releases Adds a JPEG -XL Output mode.","title":"JPEGXL Plugin"},{"location":"plugins/plugins/#magick-export-plugin","text":"ShirleyNeko \u00b7 GitHub Repository \u00b7 Releases A Work-In-Progress plugin that adds more render Output modes (ie OpenEXR, PNG16, etc.) using ImageMagick or GraphicsMagick.","title":"Magick Export Plugin"},{"location":"plugins/plugins/#octree-plugin","text":"aTom3333 \u00b7 GitHub Repository \u00b7 Releases This is a plugin for Chunky that adds more octree implementations with a range of uses and benefits. See the GitHub repository for more information and use. Notable implementations: Disk Implementation - Caches octree to disk. Extremely slow compared to other octree implementations but bypasses memory limits when loading large worlds. Garbage-collected Implementation - Generally faster octree creation / loading times. Higher peak memory usages. Dictionary Implementation - Lower memory usage than PACKED . Slightly slower while rendering and loading. Small DAG Implementation - Even lower memory usage than DICTIONARY . Slightly slower while rendering and loading. A few more options are available but not listed.","title":"Octree Plugin"},{"location":"plugins/plugins/#opencl-plugin","text":"Redox \u00b7 GitHub Repository \u00b7 Releases A WIP OpenCL raytracer for Chunky. Not all blocks and features are supported. Experimental This plugin is in early beta state and does not support all Chunky features yet.","title":"OpenCL Plugin"},{"location":"rendering/","text":"Introduction \u00b6 Path Tracing \u00b6 Path Tracing is a rendering algorithm under the umbrella of ray tracing in which rays are cast from a virtual camera and traced through a simulated scene. Ray tracing is most similar to how the world around you works. Photons are emitted from light sources and bounce around before they hit your eyes. However, this is extremely computationally intensive and most real-time computer graphics have long used a technique call rasterization. Please read the following NVIDIA blog post if you want more information on the differences between Ray Tracing and Rasterization . Path tracing uses random sampling to incrementally compute a final image. The random sampling process makes it possible to render some complex phenomena which are not handled in regular ray tracing, but it generally takes longer time to produce a high quality path traced image. The random sampling in path tracing causes noise to appear in the rendered image. The noise is removed by letting the algorithm generate more samples, i.e. color values resulting from a single ray. A more in-depth explanation of the path tracing algorithm is given below or watch the following video on Disney's Practical Guide to Path Tracing . Random sampling \u00b6 Chunky uses the Monte Carlo method where rays are distributed randomly within each pixel in camera space and at each intersection with an object in the scene a new reflection ray, pointing in a random direction, is generated. After some number of bounces, clamped by Ray Depth , each ray eventually either exits the scene or is absorbed. When a ray has finished bouncing about in the scene a sample value is calculated based on the objects the ray bounced against. The sample value is added to the average for the source pixel. The samples in a path-traced image are distributed evenly over all pixels. The color of each pixel is the average of all the sample values computed for that pixel. The random components in path tracing cause the rendered image to appear noisy and smaller objects are harder to hit. The noise decreases over time as more and more samples are calculated which we call convergence. Samples Per Pixel ( SPP ) \u00b6 The defining factor for render quality is the number of Samples Per Pixel ( SPP ). Fallback gif The higher SPP you have in a rendered image the less noise will be noticeable. However, the added quality per sample decreases the more samples you have already (since each sample is just contributing to an average over all samples). The difference in image quality between, for example, 20,000 SPP and 21,000 SPP will not be as noticeable as between 1,000 SPP and 2,000 SPP . Sunlight does not typically require a high SPP to give a nice image; This is due to Sunlight sampling or, it's more technical name, Next Event Estimation ( NEE ) which is enabled by default. Outdoor scenes can be rendered with relatively low SPP if sunlight is enabled. Emitters (torches, lava, glowstone, pumpkins, etc.) require a lot more samples to reduce the noise as NEE is not enabled by default due to a multitude of reasons which will be covered later. Outdoor scenes with emitters require more samples than a sunlight only scene and indoor scenes, or similar, in low-light environments require a lot more samples. Render time \u00b6 There is no definite answer to how long it will take to render a scene. The general guideline is that the longer you render an image, the better it will become. Take into account the diminishing returns explained above. The time required to render a nice looking image depends on how well-lit the scene is, how many Samples Per Second ( SPS ) the renderer can produce, which depends on how fast your CPU is and the scene complexity, and how many pixels the canvas has. Scene complexity has no real measure outside of scene size (loaded chunks and entities), if fog is enabled, if you are using a HDRi skymap, the Ray Depth, etc. Not all options impact performance. Scaling the canvas has an effect on render time proportional to the pixel area of the canvas. An image of 800 by 800 pixels will take four times as long time to achieve the same quality as an image of 400 by 400 pixels since the total number of pixels has quadrupled. If your renders are taking too long, you can reduce the canvas size for quicker results. More about noise \u00b6 Small but bright light sources, such as torches, add a lot of noise to a scene. It takes especially long time to render a scene lit mostly by a few torches. This is an unfortunate and unavoidable disadvantage of the Path Tracing rendering method. The reason for this effect is based on the low probability for each sampled light path to include the torches, versus the high luminance of the object. The final render takes the average of all sampled values, but the average can be \"too high\" for a long time because of the high luminance. The average will decrease over time, but for a while there may be one pixel that has been lit by a particular light source in a neighbourhood of several pixels that will stand out sharply against the others that have not yet been lit by the same source, hence the bright dots seen above at low sample counts. Torches add much noise to the scene and can take long to render. This scene was rendered to 128 SPP . Full block emitters, such as glowstone, have a much higher probability for a sampled light path to include the glowstone, because it is much larger. That means noise is reduced in much fewer samples than with torches. This scene was rendered to 128 SPP . Note how much less noise exists in this scene than the previous one. Outside of just brute forcing more samples to reduce noise there are a number of methods you can use to reduce noise or converge a render sooner. For more information please read the next article on Denoising . Emitter Sampling Strategy ( ESS ) \u00b6 As covered before: With every intersection the sun is sampled due to NEE adding its contribution to the ray without the need for random sampling. This is one of the main reasons why the convergence of scenes lit by the sun (and sky) occurs so quickly. Emitters on the other hand need to be directly hit for them to contribute which has a lower probability of occurring; especially with smaller emitters like torches. Emitter Sampling Strategy ( ESS ) enables an \"optimised\" NEE , similar to the sampling which the sun uses, and, in theory, should lead to faster convergence. Whereas there is only a single sun present in the scene there can be multiple emitters and those at distances where they will not contribute much to the pixel being sampled- For this we have the emittergrid which holds the positions of all the loaded emitters within cells. Each cell of the grid holds the position of the emitters present in this cell and in neighboring cells. As such when we want to sample emitters close from an intersection point, we only have to look at the cell where this intersection falls in and we will find every emitter we are interested in. That way the cost of processing the additional samples is minimalised compared to if we would sample all emitters. The reason we need to hold emitter of neighboring cells is because emitters a few block away from the intersection point to have an effect even if it falls in a different cell. With ESS :ONE only a single emitter is sampled per intersection within the cell plus adjacent. For ESS :ALL every emitter in the cell plus adjacent are sampled per intersection. Sampling emitters increases the rendering cost but reduces the required samples. ESS :ONE tends to be very similar to ESS :NONE with ESS :ALL being the \"slowest\" but potentially fastest to converge- ESS :ALL also tends to result in much brighter images than NONE/ONE so a reduction in exposure or emittance value is required to compensate for this. This is known about and we need to fix some maths to solve it. With this every emitter at cellSize or fewer blocks from the intersection points will always be found. The maximum distance where an emitter can be found in some cases is 2*cellSize-1 blocks away . Reducing this value too low can boost performance or lead to light cut-off. The following renders demonstrate the effects of ESS . Each was rendered for one hour. Render speed depends on your CPU and your Chunky settings. A scene rendered to 610 SPP with ESS set to None . The same scene rendered to 460 SPP with ESS set to One . The same scene rendered to 45 SPP with ESS set to All . ESS : None is the quickest to render, but has the most noise. ESS : One is somewhat slower, but noise is reduced and the image is brighter overall. ESS : All is by far the slowest to render, but it produces the least noise. It also produces much brighter renders compared to ESS : None and ESS : One, so turn down either the Emitter intensity or the Exposure to compensate. ESS also has the unfortunate problem of projecting the lighting as a ghost image of the emitter's texture onto other surfaces. This is due to a bug, and it will be fixed in a future release. Data structures \u00b6 Chunky uses two data structures to hold world data once loaded. These structures are chosen to help accelerate performance while path tracing. Octree \u00b6 Chunky makes use of a Sparse Voxel Octree ( SVO ) (also see Octree ) to store loaded world data of blocks for renders in a \"bi\"nary tree like structure with eight children/siblings instead of two. Use of a SVO grants Chunky two main advantages; Firstly that only pixels that are displayed are computed. Secondly is that interior voxels or blocks, which are fully enclosed by other voxels, are not included in the SVO which limits the amount of system memory ( RAM ) required for the world. There are a few different Octrees that are available within Chunky being NODE (legacy), PACKED (default), and BIGPACKED all which have different pros and cons. Available Octrees can be expanded via Plugins such as aTom3333's Octree plugin . Bounding Volume Hierarchy ( BVH ) \u00b6 Entities and objects larger than a single block in size are stored within a Bounding Volume Hierarchy ( BVH ) which is a similar tree like structure to the previously mentioned octree though it stores geometric objects. There are a few different BVH build methods available within Chunky being SAH_MA (default), SAH, and MIDPOINT all which have different pros and cons. Available BVHs can be expanded via Plugins such as aTom3333's BVH plugin . Renderers \u00b6 Chunky's path traced renderer was built back in 2010 and has been slowly improved over the years. At the time a CPU based path tracer made most sense for a number of reasons including the required memory to load a Minecraft world compared to the available RAM and Video RAM ( VRAM ). A lot has changed since then. It is possible to switch the renderer in Chunky using Plugins . A renderer can be used to render feature images like albedo maps (base color), normal maps, depth maps, etc. or an alternative rendering algorithm. The two most notable in this category are leMaik's Denoising plugin , which leverages Artificial Intelligence ( AI ) to smartly denoise noisy images, and Redox's ChunkyCl plugin , which adds experimental GPU path tracing which can drastically accelerate rendering. In addition, there is Chunky Cloud which is a distributed cloud rendering service in beta. Chunky Cloud is a community driven cloud rendering platform that requires community donated render nodes. SPP Comparisons \u00b6 An indoor scene rendered with increasing SPP . The white numbers show SPP : Image formats and color \u00b6 Internally Chunky stores the canvas with three \"doubles\" per pixel. Doubles are Double-precision floating-point format (sometimes called FP64 or float64). Storing a full double precision float for each channel (8 bytes \u00d7 3 = 24 bytes) is a burden for modern systems so compression is typically used. See the .dump format . Standard Dynamic Range ( SDR ) typically have 24 bits per pixel / 8 bits per color. High Dynamic Range ( HDR ) images are regarded as anything with an increased bits per color/pixel. JPEG / JPG ( SDR ) - 24 bits per pixel and uses a lossy form of compression based on the discrete cosine transform which typically provides 10:1 compression. Smallest file size and often used for photos on websites. PNG ( SDR ) - 24 bits per pixel and a lossless format. Often maintains original quality with relatively small file size often used on websites. TIFF ( HDR ) - Upto 96 bits per pixel or 32 bits per color. \"RAW\" format. PFM ( HDR ) - 96 bits per pixel or 32 bits per color. \"RAW\" format. Mainly used in conjunction with the Denoiser plugin and OIDN . HDR ( HDR ) - The HDR /RGBE format stores pixels as one byte for each RGB (red, green, and blue) value with a one byte shared exponent. Thus it stores 32 bits per pixel. This results in a 6:1 compression, at the expense of reduced colour fidelity.","title":"Introduction"},{"location":"rendering/#introduction","text":"","title":"Introduction"},{"location":"rendering/#path-tracing","text":"Path Tracing is a rendering algorithm under the umbrella of ray tracing in which rays are cast from a virtual camera and traced through a simulated scene. Ray tracing is most similar to how the world around you works. Photons are emitted from light sources and bounce around before they hit your eyes. However, this is extremely computationally intensive and most real-time computer graphics have long used a technique call rasterization. Please read the following NVIDIA blog post if you want more information on the differences between Ray Tracing and Rasterization . Path tracing uses random sampling to incrementally compute a final image. The random sampling process makes it possible to render some complex phenomena which are not handled in regular ray tracing, but it generally takes longer time to produce a high quality path traced image. The random sampling in path tracing causes noise to appear in the rendered image. The noise is removed by letting the algorithm generate more samples, i.e. color values resulting from a single ray. A more in-depth explanation of the path tracing algorithm is given below or watch the following video on Disney's Practical Guide to Path Tracing .","title":"Path Tracing"},{"location":"rendering/#random-sampling","text":"Chunky uses the Monte Carlo method where rays are distributed randomly within each pixel in camera space and at each intersection with an object in the scene a new reflection ray, pointing in a random direction, is generated. After some number of bounces, clamped by Ray Depth , each ray eventually either exits the scene or is absorbed. When a ray has finished bouncing about in the scene a sample value is calculated based on the objects the ray bounced against. The sample value is added to the average for the source pixel. The samples in a path-traced image are distributed evenly over all pixels. The color of each pixel is the average of all the sample values computed for that pixel. The random components in path tracing cause the rendered image to appear noisy and smaller objects are harder to hit. The noise decreases over time as more and more samples are calculated which we call convergence.","title":"Random sampling"},{"location":"rendering/#samples-per-pixel-spp","text":"The defining factor for render quality is the number of Samples Per Pixel ( SPP ). Fallback gif The higher SPP you have in a rendered image the less noise will be noticeable. However, the added quality per sample decreases the more samples you have already (since each sample is just contributing to an average over all samples). The difference in image quality between, for example, 20,000 SPP and 21,000 SPP will not be as noticeable as between 1,000 SPP and 2,000 SPP . Sunlight does not typically require a high SPP to give a nice image; This is due to Sunlight sampling or, it's more technical name, Next Event Estimation ( NEE ) which is enabled by default. Outdoor scenes can be rendered with relatively low SPP if sunlight is enabled. Emitters (torches, lava, glowstone, pumpkins, etc.) require a lot more samples to reduce the noise as NEE is not enabled by default due to a multitude of reasons which will be covered later. Outdoor scenes with emitters require more samples than a sunlight only scene and indoor scenes, or similar, in low-light environments require a lot more samples.","title":"Samples Per Pixel (SPP)"},{"location":"rendering/#render-time","text":"There is no definite answer to how long it will take to render a scene. The general guideline is that the longer you render an image, the better it will become. Take into account the diminishing returns explained above. The time required to render a nice looking image depends on how well-lit the scene is, how many Samples Per Second ( SPS ) the renderer can produce, which depends on how fast your CPU is and the scene complexity, and how many pixels the canvas has. Scene complexity has no real measure outside of scene size (loaded chunks and entities), if fog is enabled, if you are using a HDRi skymap, the Ray Depth, etc. Not all options impact performance. Scaling the canvas has an effect on render time proportional to the pixel area of the canvas. An image of 800 by 800 pixels will take four times as long time to achieve the same quality as an image of 400 by 400 pixels since the total number of pixels has quadrupled. If your renders are taking too long, you can reduce the canvas size for quicker results.","title":"Render time"},{"location":"rendering/#more-about-noise","text":"Small but bright light sources, such as torches, add a lot of noise to a scene. It takes especially long time to render a scene lit mostly by a few torches. This is an unfortunate and unavoidable disadvantage of the Path Tracing rendering method. The reason for this effect is based on the low probability for each sampled light path to include the torches, versus the high luminance of the object. The final render takes the average of all sampled values, but the average can be \"too high\" for a long time because of the high luminance. The average will decrease over time, but for a while there may be one pixel that has been lit by a particular light source in a neighbourhood of several pixels that will stand out sharply against the others that have not yet been lit by the same source, hence the bright dots seen above at low sample counts. Torches add much noise to the scene and can take long to render. This scene was rendered to 128 SPP . Full block emitters, such as glowstone, have a much higher probability for a sampled light path to include the glowstone, because it is much larger. That means noise is reduced in much fewer samples than with torches. This scene was rendered to 128 SPP . Note how much less noise exists in this scene than the previous one. Outside of just brute forcing more samples to reduce noise there are a number of methods you can use to reduce noise or converge a render sooner. For more information please read the next article on Denoising .","title":"More about noise"},{"location":"rendering/#emitter-sampling-strategy-ess","text":"As covered before: With every intersection the sun is sampled due to NEE adding its contribution to the ray without the need for random sampling. This is one of the main reasons why the convergence of scenes lit by the sun (and sky) occurs so quickly. Emitters on the other hand need to be directly hit for them to contribute which has a lower probability of occurring; especially with smaller emitters like torches. Emitter Sampling Strategy ( ESS ) enables an \"optimised\" NEE , similar to the sampling which the sun uses, and, in theory, should lead to faster convergence. Whereas there is only a single sun present in the scene there can be multiple emitters and those at distances where they will not contribute much to the pixel being sampled- For this we have the emittergrid which holds the positions of all the loaded emitters within cells. Each cell of the grid holds the position of the emitters present in this cell and in neighboring cells. As such when we want to sample emitters close from an intersection point, we only have to look at the cell where this intersection falls in and we will find every emitter we are interested in. That way the cost of processing the additional samples is minimalised compared to if we would sample all emitters. The reason we need to hold emitter of neighboring cells is because emitters a few block away from the intersection point to have an effect even if it falls in a different cell. With ESS :ONE only a single emitter is sampled per intersection within the cell plus adjacent. For ESS :ALL every emitter in the cell plus adjacent are sampled per intersection. Sampling emitters increases the rendering cost but reduces the required samples. ESS :ONE tends to be very similar to ESS :NONE with ESS :ALL being the \"slowest\" but potentially fastest to converge- ESS :ALL also tends to result in much brighter images than NONE/ONE so a reduction in exposure or emittance value is required to compensate for this. This is known about and we need to fix some maths to solve it. With this every emitter at cellSize or fewer blocks from the intersection points will always be found. The maximum distance where an emitter can be found in some cases is 2*cellSize-1 blocks away . Reducing this value too low can boost performance or lead to light cut-off. The following renders demonstrate the effects of ESS . Each was rendered for one hour. Render speed depends on your CPU and your Chunky settings. A scene rendered to 610 SPP with ESS set to None . The same scene rendered to 460 SPP with ESS set to One . The same scene rendered to 45 SPP with ESS set to All . ESS : None is the quickest to render, but has the most noise. ESS : One is somewhat slower, but noise is reduced and the image is brighter overall. ESS : All is by far the slowest to render, but it produces the least noise. It also produces much brighter renders compared to ESS : None and ESS : One, so turn down either the Emitter intensity or the Exposure to compensate. ESS also has the unfortunate problem of projecting the lighting as a ghost image of the emitter's texture onto other surfaces. This is due to a bug, and it will be fixed in a future release.","title":"Emitter Sampling Strategy (ESS)"},{"location":"rendering/#data-structures","text":"Chunky uses two data structures to hold world data once loaded. These structures are chosen to help accelerate performance while path tracing.","title":"Data structures"},{"location":"rendering/#octree","text":"Chunky makes use of a Sparse Voxel Octree ( SVO ) (also see Octree ) to store loaded world data of blocks for renders in a \"bi\"nary tree like structure with eight children/siblings instead of two. Use of a SVO grants Chunky two main advantages; Firstly that only pixels that are displayed are computed. Secondly is that interior voxels or blocks, which are fully enclosed by other voxels, are not included in the SVO which limits the amount of system memory ( RAM ) required for the world. There are a few different Octrees that are available within Chunky being NODE (legacy), PACKED (default), and BIGPACKED all which have different pros and cons. Available Octrees can be expanded via Plugins such as aTom3333's Octree plugin .","title":"Octree"},{"location":"rendering/#bounding-volume-hierarchy-bvh","text":"Entities and objects larger than a single block in size are stored within a Bounding Volume Hierarchy ( BVH ) which is a similar tree like structure to the previously mentioned octree though it stores geometric objects. There are a few different BVH build methods available within Chunky being SAH_MA (default), SAH, and MIDPOINT all which have different pros and cons. Available BVHs can be expanded via Plugins such as aTom3333's BVH plugin .","title":"Bounding Volume Hierarchy (BVH)"},{"location":"rendering/#renderers","text":"Chunky's path traced renderer was built back in 2010 and has been slowly improved over the years. At the time a CPU based path tracer made most sense for a number of reasons including the required memory to load a Minecraft world compared to the available RAM and Video RAM ( VRAM ). A lot has changed since then. It is possible to switch the renderer in Chunky using Plugins . A renderer can be used to render feature images like albedo maps (base color), normal maps, depth maps, etc. or an alternative rendering algorithm. The two most notable in this category are leMaik's Denoising plugin , which leverages Artificial Intelligence ( AI ) to smartly denoise noisy images, and Redox's ChunkyCl plugin , which adds experimental GPU path tracing which can drastically accelerate rendering. In addition, there is Chunky Cloud which is a distributed cloud rendering service in beta. Chunky Cloud is a community driven cloud rendering platform that requires community donated render nodes.","title":"Renderers"},{"location":"rendering/#spp-comparisons","text":"An indoor scene rendered with increasing SPP . The white numbers show SPP :","title":"SPP Comparisons"},{"location":"rendering/#image-formats-and-color","text":"Internally Chunky stores the canvas with three \"doubles\" per pixel. Doubles are Double-precision floating-point format (sometimes called FP64 or float64). Storing a full double precision float for each channel (8 bytes \u00d7 3 = 24 bytes) is a burden for modern systems so compression is typically used. See the .dump format . Standard Dynamic Range ( SDR ) typically have 24 bits per pixel / 8 bits per color. High Dynamic Range ( HDR ) images are regarded as anything with an increased bits per color/pixel. JPEG / JPG ( SDR ) - 24 bits per pixel and uses a lossy form of compression based on the discrete cosine transform which typically provides 10:1 compression. Smallest file size and often used for photos on websites. PNG ( SDR ) - 24 bits per pixel and a lossless format. Often maintains original quality with relatively small file size often used on websites. TIFF ( HDR ) - Upto 96 bits per pixel or 32 bits per color. \"RAW\" format. PFM ( HDR ) - 96 bits per pixel or 32 bits per color. \"RAW\" format. Mainly used in conjunction with the Denoiser plugin and OIDN . HDR ( HDR ) - The HDR /RGBE format stores pixels as one byte for each RGB (red, green, and blue) value with a one byte shared exponent. Thus it stores 32 bits per pixel. This results in a 6:1 compression, at the expense of reduced colour fidelity.","title":"Image formats and color"},{"location":"rendering/denoising/","text":"Denoising \u00b6 Image noise is an inevitable consequence of path tracing and as previously stated; Brute force was the conventional solution in the past. Cornell Box rendered at 16 SPP with lots of image noise. More on SPP \u00b6 Path tracing renders a sample by recursively tracing a random ray for each pixel through the scene. Theoretically, after an infinite amount of samples, a rendered image would converge on the perfect representation of a scene and not have any noise. Of course, we can't actually render an infinite number of samples, so we must find a way to deal with image noise. The simplest way to decrease noise is by simply rendering more SPP . The biggest disadvantage to this is that a 2x increase in SPP is required for a 2x decrease in noise. In other words, a 32 SPP image will need 32 more samples to decrease the noise in half, a 1,000,000 SPP image will need 1,000,000 more samples to decrease the noise by half. The time required increases exponentially and thus this is not a viable solution except for the most dedicated of renderers; Of course once the OpenCL GPU acceleration plugin by Redox is \"finished\" this would make high sample count renders much more viable. Cornell Box rendered at 1,024 spp. Cornell Box rendered at 1,000,000 spp. Feature Images \u00b6 Touched on in the Introduction to Path Tracing article is the concept of Feature Images or Arbitrary Output Variables ( AOVs ). To explain this concept we shall describe a more generalised renderer. A rendered image can be understood in terms of a number of visible features: Shading, fogging, shadows, soft shadows, refraction, indirect illumination, etc. These images can either be combined to produce the final render or to provide additional information about the 3D scene that would not be expressed by the final render. See Rendering (computer graphics) for more information. By default Chunky does not have native support to export visible features, which can then be combined into the final render later, though Chunky does have a number of Plugins available which can provide additional information about the 3D scene. This is still useful particularly in post-processing processes. Albedo - Contains the approximate color of surfaces independent of illumination and viewing angle. Normal - Contains the shading normals of the surfaces. Ambient Occlusion ( AO ) - Describes how each pixel in a scene is exposed to ambient lighting. Depth Buffer / Z-buffer - Represents depth information within the scene in grey scale. In Chunky black is closer to the camera with white further away. Extracting visible features from Chunky \u00b6 It is possible to extract some visible features within Chunky through some clever toggling of various settings within Chunky. This images can be recombined in post to reproduce the final render or, more likely, to post process each contributional feature separately. Sunlight illumination - Enable sunlight and Disable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Sky illumination - Disable sunlight and Disable emitters , Set Sky mode settings to back to whatever mode you had before, and set Fog density to 0.0. Emitters illumination - Disable sunlight and Enable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Fog only - Disable sunlight and Disable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Sun Pass Sky Pass Emitter Pass Composite Typical Bake One of the main uses of this splitting and separate processing of each contribution is to only denoise those that are most noisy. Most denoising methods employ some form of destructive blurring which can reduce fine detail. Furthermore, given how many samples might be required to render the final render, having this much control to touch up the contributions of different light sources is extremely powerful and can save time. Artificial Intelligence ( AI ) accelerated denoising \u00b6 There are a number of denoising solutions that exist and have a multitude of pros and cons; typically these methods resort to blurring of some method. Examples . AI accelerated denoisers use a fundamentally different approach called deep learning. The AI is trained to distinguish between real image details and noise in ray tracing based rendering applications, from a number of 3D scenes from 1 SPP to fully converged, allowing it to not only remove noise but recover detail. This drastically reduces the amount of necessary SPP by even multiple orders of magnitude. These AI denoisers can operate solely on the noisy final image straight out of a ray traced renderer however their best results come from providing feature images (/ AOVs ) which provide additional information to the AI . For Chunky we have leMaik's Denoising plugin which both provides the required renderers for the two additional feature images typically recommended, being the albedo and normal maps, but it is also capable of automatically denoising using Intel Open Image Denoise ( OIDN ) . We should note that this denoiser is not restricted to Intel platforms as any CPU with support for at least SSE4.1 or Apple Silicon is supported. Otherwise there is the NVidia AI -accelerated Denoiser ( NVAIDN ), which is part of OptiX, which requires an NVidia GPU of Maxwell architecture or newer plus at least driver 465.84 or higher. Standalone NVAIDN . The albedo map: The Albedo map is a feature image that provides the largest quality bump to the denoiser. It\u2019s basically just a representation of the texture information within the scene independent of shading (lighting) or viewing angle. This map tends to help restore texture details. The normal map: The Normal map is another feature image that can help. In order to use a Normal map you need to provide the Denoiser with the Albedo map first. This map tends to help restore block shape. Scene rendered to 64 SPP : Denoised image: The higher the SPP the scene is rendered to, the better the denoiser will perform. An important disclaimer is needed regarding AI accelerated denoisers - They aren't magic - If you do not provide the addtional feature images, and/or the noisy image you are trying to denoise is too challenging for the AI to handle, it will result in visual artifacts, such as deformed blocks and blurred textures. This gives some denoised renders an \"oil painting\" effect. If possible provide the additional feature images or raise the SPP .","title":"Denoising"},{"location":"rendering/denoising/#denoising","text":"Image noise is an inevitable consequence of path tracing and as previously stated; Brute force was the conventional solution in the past. Cornell Box rendered at 16 SPP with lots of image noise.","title":"Denoising"},{"location":"rendering/denoising/#more-on-spp","text":"Path tracing renders a sample by recursively tracing a random ray for each pixel through the scene. Theoretically, after an infinite amount of samples, a rendered image would converge on the perfect representation of a scene and not have any noise. Of course, we can't actually render an infinite number of samples, so we must find a way to deal with image noise. The simplest way to decrease noise is by simply rendering more SPP . The biggest disadvantage to this is that a 2x increase in SPP is required for a 2x decrease in noise. In other words, a 32 SPP image will need 32 more samples to decrease the noise in half, a 1,000,000 SPP image will need 1,000,000 more samples to decrease the noise by half. The time required increases exponentially and thus this is not a viable solution except for the most dedicated of renderers; Of course once the OpenCL GPU acceleration plugin by Redox is \"finished\" this would make high sample count renders much more viable. Cornell Box rendered at 1,024 spp. Cornell Box rendered at 1,000,000 spp.","title":"More on SPP"},{"location":"rendering/denoising/#feature-images","text":"Touched on in the Introduction to Path Tracing article is the concept of Feature Images or Arbitrary Output Variables ( AOVs ). To explain this concept we shall describe a more generalised renderer. A rendered image can be understood in terms of a number of visible features: Shading, fogging, shadows, soft shadows, refraction, indirect illumination, etc. These images can either be combined to produce the final render or to provide additional information about the 3D scene that would not be expressed by the final render. See Rendering (computer graphics) for more information. By default Chunky does not have native support to export visible features, which can then be combined into the final render later, though Chunky does have a number of Plugins available which can provide additional information about the 3D scene. This is still useful particularly in post-processing processes. Albedo - Contains the approximate color of surfaces independent of illumination and viewing angle. Normal - Contains the shading normals of the surfaces. Ambient Occlusion ( AO ) - Describes how each pixel in a scene is exposed to ambient lighting. Depth Buffer / Z-buffer - Represents depth information within the scene in grey scale. In Chunky black is closer to the camera with white further away.","title":"Feature Images"},{"location":"rendering/denoising/#extracting-visible-features-from-chunky","text":"It is possible to extract some visible features within Chunky through some clever toggling of various settings within Chunky. This images can be recombined in post to reproduce the final render or, more likely, to post process each contributional feature separately. Sunlight illumination - Enable sunlight and Disable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Sky illumination - Disable sunlight and Disable emitters , Set Sky mode settings to back to whatever mode you had before, and set Fog density to 0.0. Emitters illumination - Disable sunlight and Enable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Fog only - Disable sunlight and Disable emitters , Set Sky mode settings to Black , and set Fog density to 0.0. Sun Pass Sky Pass Emitter Pass Composite Typical Bake One of the main uses of this splitting and separate processing of each contribution is to only denoise those that are most noisy. Most denoising methods employ some form of destructive blurring which can reduce fine detail. Furthermore, given how many samples might be required to render the final render, having this much control to touch up the contributions of different light sources is extremely powerful and can save time.","title":"Extracting visible features from Chunky"},{"location":"rendering/denoising/#artificial-intelligence-ai-accelerated-denoising","text":"There are a number of denoising solutions that exist and have a multitude of pros and cons; typically these methods resort to blurring of some method. Examples . AI accelerated denoisers use a fundamentally different approach called deep learning. The AI is trained to distinguish between real image details and noise in ray tracing based rendering applications, from a number of 3D scenes from 1 SPP to fully converged, allowing it to not only remove noise but recover detail. This drastically reduces the amount of necessary SPP by even multiple orders of magnitude. These AI denoisers can operate solely on the noisy final image straight out of a ray traced renderer however their best results come from providing feature images (/ AOVs ) which provide additional information to the AI . For Chunky we have leMaik's Denoising plugin which both provides the required renderers for the two additional feature images typically recommended, being the albedo and normal maps, but it is also capable of automatically denoising using Intel Open Image Denoise ( OIDN ) . We should note that this denoiser is not restricted to Intel platforms as any CPU with support for at least SSE4.1 or Apple Silicon is supported. Otherwise there is the NVidia AI -accelerated Denoiser ( NVAIDN ), which is part of OptiX, which requires an NVidia GPU of Maxwell architecture or newer plus at least driver 465.84 or higher. Standalone NVAIDN . The albedo map: The Albedo map is a feature image that provides the largest quality bump to the denoiser. It\u2019s basically just a representation of the texture information within the scene independent of shading (lighting) or viewing angle. This map tends to help restore texture details. The normal map: The Normal map is another feature image that can help. In order to use a Normal map you need to provide the Denoiser with the Albedo map first. This map tends to help restore block shape. Scene rendered to 64 SPP : Denoised image: The higher the SPP the scene is rendered to, the better the denoiser will perform. An important disclaimer is needed regarding AI accelerated denoisers - They aren't magic - If you do not provide the addtional feature images, and/or the noisy image you are trying to denoise is too challenging for the AI to handle, it will result in visual artifacts, such as deformed blocks and blurred textures. This gives some denoised renders an \"oil painting\" effect. If possible provide the additional feature images or raise the SPP .","title":"Artificial Intelligence (AI) accelerated denoising"},{"location":"rendering/scene_format/","text":"Scene Format \u00b6 Dump \u00b6 The .dump file stores a header containing width, height, spp, render time, and the actual dump which is three \"doubles\" per pixel. Doubles are Double-precision floating-point format (sometimes called FP64 or float64). Old Dump Format \u00b6 GZIP stream of header + dump stored in column major order New Dump Format \u00b6 0x44 0x55 0x4D 0x50 <1 as int> <header> <dump compressed with fpc magic> Header \u00b6 <width int> <height int> <spp int> <render time in millis long> Octree \u00b6 The octree file is GZIP compressed and contains a version integer, block palette, world octree, water octree, grass tinting, foliage tinting, and water tinting data. The first 4 bytes are a version number and currently must be between v3 and v6. v3-v4 octrees are currently converted to v5 for loading as data nodes (only used for water and lava) were replaced by new per-variant types. Octree Format \u00b6 <version int> <block palette data> <world octree data> <water octree data> <grass tinting data> <foliage tinting data> <water tinting data if version >= 4> The section of code . Block Palette Data \u00b6 Stores NBT tags for each block. <version int == 4> <number of block types> <Serialized NBT tags for each block in order> World and water Octree Data \u00b6 \"octree is pretty complex lol\" \"The octree itself is something like storing it depth first with 0xFFFF FFFF as a node and the type if it is a leaf.\" World/Tint Textures \u00b6 Stores tint colors for grass, foliage, and water as WorldTexture. <number of tiles (chunks)> for each tile: <chunk x coordinate int> <chunk y coordinate int> <chunk texture in x major order, rgb as floats in linear color space> Emittergrid \u00b6 The .emittergrid is only generated if Emitter Sampling Strategy is set to One or All. Is also GZIP compressed. Version 0 - <version as int> <grid size as int> <cell size as int> for each emitter position <positions as ints, -x, -y, -z corner, +0.5 to get center> for each grid <number of emitters in grid, index of emitters in positions array> Version 1 - <version as int> <cell size as int> <grid offset x> <grid size x> <grid offset y> ... Version 2 - <x,y,z center float, radius as float> for emitter position Scene Description Format ( SDF ) \u00b6 Most of the settings in Chunky scenes are stored in Scene Description files using a JSON -based file format. This page documents the SDF file format. The documentation is currently incomplete, and may lag behind the current Chunky version as new versions are released. Check the version history at the end of this page to see the latest updates made to the SDF documentation. SDF JSON files are stored in the scene directory and the filename is based on the scene name with .json appended. For example, the JSON file for a scene named MyScene would be MyScene.json . Structure \u00b6 General \u00b6 Key Value range Default value Description sdfVersion Integer 9 Scene Description Format ( SDF ) version name String Scene name width Integer 400 Canvas width height Integer 400 Canvas height yClipMin Integer Clipping world when loading into scene yClipMax Integer Clipping world when loading into scene yMin Integer Slicing map view (impacts octree offset) yMax Integer Slicing map view (impacts octree offset) exposure Number 1 Camera exposure postprocess {\"NONE\", \u201cTONEMAP2\u201d, \"GAMMA\", \"TONEMAP3\", \"TONEMAP1\"} \u201cGAMMA\u201d Tonemapping operator outputMode {\"PNG\", \"TIFF_32\", \u201cPFM\u201d} \u201c PNG \u201d Image output mode renderTime Number Current cumulative rendering time spp Integer Current samples per pixel ( SPP ) sppTarget Integer 1000 Render SPP target rayDepth Integer 5 Ray recursion depth pathTrace Boolean false Rendering mode (true = path tracing, false = preview) dumpFrequency Integer 500 How often the current render state is saved (samples per state save) saveSnapshots Boolean false Whether a snapshot image is saved for each render dump emittersEnabled Boolean false Whether emitters should emit light or not emitterIntensity Number 13.0 Controls intensity of emitters sunEnabled Boolean true Whether the sun should emit light or not stillWater Boolean false Whether water should be still or wavy waterOpacity Number {0 to 1} 0.42 Opacity of water waterVisibility Number 9.0 Distance rays can travel in water in blocks useCustomWaterColor Boolean false Toggle between biome tinted water and custom water color waterColor RGB Object See below fogColor RGB Object See below fastFog Boolean true Faster fog algorithm biomeColorsEnabled Boolean true Enable biome tint transparentSky Boolean false Treat sky as transparent fogDensity Number 0.0 Fog density skyFogDensity Number {0 to 1} 1.0 Controls the amount fog blends into the sky waterWorldEnabled Boolean false Enable water world waterWorldHeight Number 63.0 Controls height of water world waterWorldHeightOffsetEnabled Boolean true Applies Minecraft water offset waterWorldClipEnabled Boolean true renderActors Boolean true world World Object See below camera Camera Object See below sun Sun Object See below sky Sky Object See below cameraPresets Array of Camera Preset Objects See below materials Material Array Object See below chunkList Array of integer arrays Chunks in the scene entities Array of Entity Objects Static entities in the scene, e.g. paintings actors Array of Actor Objects Posable entities such as players. entityLoadingPreferences entityLoadingPreferences Object See below octreeImplementation {\u201cPACKED\u201d, \u201cNODE\u201d, \u201cBIGPACKED\u201d} \u201cPACKED\u201d Octree implementation to use bvhImplementation {\u201cSAH_MA\u201d, \u201cSAH\u201d, \u201cMIDPOINT\u201d} \u201cSAH_MA\u201d BVH implementation to use emitterSamplingStrategy {\u201cNONE\u201d, \u201cONE\u201d, \u201cALL\u201d} \u201cNONE\u201d Enables NEE for emitters for one or all per bounce preventNormalEmitterWithSampling Boolean true Attempts to prevent normal emitters and just use NEE animationTime Number 0.0 renderer {\u201cPathTracingRenderer\u201d} \u201cPathTracingRenderer\u201d Change renderer used for path tracing previewRenderer {\u201cPreviewRenderer\u201d} \u201cPreviewRenderer\u201d Change renderer used for previews additionalData {} {} Unknown RGB Object \u00b6 Key Value range red Number {0 to 1} green Number {0 to 1} blue Number {0 to 1} World Object \u00b6 Key Value range path String dimension Integer {0 to 2} Camera Object \u00b6 Key Value range Default value Description name String \u201ccamera 1\u201d position XYZ Object See below orientation Direction Object See below projectionMode {\"PINHOLE\", \"PARALLEL\", \"FISHEYE\", \"STEREOGRAPHIC\", \"PANORAMIC\", \"PANORAMIC_SLOT\", \u201cODS_LEFT\u201d, \u201cODS_RIGHT\u201d} \u201cPINHOLE\u201d Camera projection mode fov Number 70.0 Field of View dof Number \"Infinity\" Depth of Field, also accepts numbers like \"0.0\" focalOffset Number 2.0 Distance to target shift XY Object See XYZ object XYZ Object \u00b6 Note - XY Object is a XYZ Object just without the Z component. Key Value range x Number y Number z Number Direction Object \u00b6 Key Value range Description roll Number In radians pitch Number In radians yaw Number In radians Sun Object \u00b6 Key Value range Default value Description altitude Number {0 to PI/2} 1.0471975511965976 The direction to the sun above the horizon (60 degrees in radians) azimuth Number {0 to 2PI} 1.2566370614359172 The direction to the sun measured from north (-72 degrees in radians) intensity Number 1.25 Sunlight scaling factor color RGB Object See above drawTexture boolean true Whether to draw the resource pack texture for the sun or not Sky Object \u00b6 Key Value range Default value Description skyYaw Number {0 to 2PI} 0.0 Offset angle for the sky map in radians skyMirrored Boolean true Enables mirroring of the skymap at the horizon (use when the vertical skymap angle is 90 degrees) skyLight Number 1.0 Sky light scaling factor mode {\"SIMULATED\", \"SOLID_COLOR\", \u201cGRADIENT\u201d, \u201cSKYMAP_PANORAMIC\u201d, \u201cSKYMAP_SPHERICAL\u201d, \u201cSKYBOX\u201d, \u201cBLACK\u201d} \"SIMULATED\" Sky rendering mode horizonOffset Number 0.0 Offset the horizon to simulate a curved earth. This helps hiding the horizon below distant objects. cloudsEnabled Boolean false Enable clouds cloudSize Number 64.0 Scale cloud map cloudOffset XYZ Object See above gradient Array of Gradient Objects See below color \u201cRGB\u201d Object Not really an RGB object.. but kinda? simulatedSky {\"Preetham\", \u201cNishita\u201d} \"Preetham\" Select method of rendering a simulated sky skyCacheResolution Integer 128 Internal resolution to be used for simulated sky, is interpolated skymap String Path to skymap skybox Array of six Strings Array of six paths to skybox images Gradient Object \u00b6 Key Value range rgb String (RGB HEX) pos Number Camera Preset Object \u00b6 Key Value range Default value Description \"camera object: name\" Camera Object \"camera name\" is the value of the name field Material Array Object \u00b6 Key Value range Default value Description \"block/entity name\" Material Object Ie \"minecraft:acacia_log\": {...} Material Object \u00b6 Key Value range Default value Description emittance Number {0+} How much light the material emits specular Number {0 to 1} Specular reflection coefficient roughness Number {0 to 1} Blurriness of reflection ior Number Index of refraction metalness Number {0 to 1} Percentage of rays tinted by material color (complex fresnel) Entity Object \u00b6 Key Value range Default value Description kind String Minecraft entity name position XYZ Object See above rotation Integer Entity rotation design Banner Design Object See below text Array of four Text Objects See below direction Integer Entity rotation material {\u201coak\u201d, \"dark_oak\"} TODO Sign Material art String Minecraft art ID angle Number art angle? Legit just at n90 degrees. placement Integer Head placement? skin String Head texture URL Banner Design Object \u00b6 Key Value range Default value Description base Integer Banner base patterns Arrange of Patterns Object See below Patterns Object \u00b6 Key Value range Default value Description pattern {\"b\", \"bs\", \"ts\", \"ls\", \"rs\", \"cs\", \"ms\", \"drs\", \"dls\", \"ss\", \"cr\", \"sc\", \"ld\", \"rud\", \"lud\", \"rd\", \"vh\", \"vhr\", \"hh\", \"hhb\", \"bl\", \"br\", \"tl\", \"tr\", \"bt\", \"tt\", \"bts\", \"tts\", \"mc\", \"mr\", \"bo\", \"cbo\", \"bri\", \"gra\", \"gru\", \"cre\", \"sku\", \"flo\", \"moj\", \"glb\", \"pig\"} Banner pattern code color Integer Text Object \u00b6 Key Value range text String color Integer Actor Object \u00b6 Key Value range Default value Description kind String Minecraft posable name position XYZ Object See above scale Number Scale actor headScale Number Scale actor head showArms Boolean Hide/show actor arms gear Array of Gear Objects See below pose Pose Object See below invisible Boolean If actor is invisible noBasePlate Boolean If armour_stand base plate is visible Gear Object \u00b6 Key Value range Default value Description head ID_Skin Object \u201chead\u201d OR {\u201cfeet\u201d, \u201clegs\u201d, \u201cchest\u201d} \u201cid\u201d: \u201c...\u201d Minecraft item ID ID_Skin Object \u00b6 Key Value range Default value Description id String \u201cminecraft:player_head\u201d skin String URL for skin texture Pose Object \u00b6 Key Value range Default value Description all Array of three Numbers Array of parts Roll, Pitch, and Yaw head Array of three Numbers Array of parts Roll, Pitch, and Yaw chest Array of three Numbers Array of parts Roll, Pitch, and Yaw leftArm Array of three Numbers Array of parts Roll, Pitch, and Yaw rightArm Array of three Numbers Array of parts Roll, Pitch, and Yaw leftLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw rightLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw entityLoadingPreferences Object \u00b6 Key Value range Default value Description se.llbit.chunky.entity.Book true Whether to load book entities se.llbit.chunky.entity.ArmorStand true Whether to load armor stand entities se.llbit.chunky.entity.PaintingEntity true Whether to load painting entities se.llbit.chunky.entity.PlayerEntity true Whether to load player entities other true Whether to load \u201cother\u201d entities Scripting \u00b6 A simple way to process scene files is by using a scripting language like Python. For example, here is a Python script that generates individual scenes for each chunk in a square grid of chunks. The script uses an original scene as template for the new scenes. import json import os.path original_scene = 'D:\\Users\\Jesper\\.chunky\\scenes\\shore-sun.json' scene_dir = os.path.abspath(os.path.join(original_scene, os.pardir)) with open(original_scene, 'r') as f: scene = json.load(f) for x in range(-10, 1): for z in range(110, 119): scene_name = 'chunk_%dx_%dz' % (x, z) scene['name'] = scene_name scene['chunkList'] = [ [ x, z ] ] scene['spp'] = 0 scene['renderTime'] = 0 new_scene = os.path.join(scene_dir, scene_name + '.json') print('Writing scene file %s' % new_scene) with open(new_scene, 'w') as f: json.dump(scene, f) Version History \u00b6 Version 2 (Chunky 1.2.0 to 1.2.3) Version 3 (Chunky 1.3-alpha1 to 1.3.3) Version 4 (Chunky 1.3.4) removed clearWater (Boolean) added waterOpacity (Number) added waterVisibility (Number) added waterColor (RGB Object) added useCustomWaterColor (Boolean) Version 5 (Chunky 1.3.5-alpha5) removed atmosphereEnabled (Boolean) removed volumetricFogEnabled (Boolean) added fogDensity (Number) added fogColor (RGB Object) added fastFog (Boolean) Version 6 (Chunky 1.3.5-alpha5) Changed postprocess from Integer to Enum Added outputMode (Enum) Version 7 (Chunky 1.3.8) Added renderActors (Boolean) Added actors (Array of Entity Objects) Version 8 (Chunky 1.4.3) Added materials (material properties) Version 9 (Chunky 1.4.4) Changed entity pose format. Added entity armor items.","title":"Scene Format"},{"location":"rendering/scene_format/#scene-format","text":"","title":"Scene Format"},{"location":"rendering/scene_format/#dump","text":"The .dump file stores a header containing width, height, spp, render time, and the actual dump which is three \"doubles\" per pixel. Doubles are Double-precision floating-point format (sometimes called FP64 or float64).","title":"Dump"},{"location":"rendering/scene_format/#old-dump-format","text":"GZIP stream of header + dump stored in column major order","title":"Old Dump Format"},{"location":"rendering/scene_format/#new-dump-format","text":"0x44 0x55 0x4D 0x50 <1 as int> <header> <dump compressed with fpc magic>","title":"New Dump Format"},{"location":"rendering/scene_format/#header","text":"<width int> <height int> <spp int> <render time in millis long>","title":"Header"},{"location":"rendering/scene_format/#octree","text":"The octree file is GZIP compressed and contains a version integer, block palette, world octree, water octree, grass tinting, foliage tinting, and water tinting data. The first 4 bytes are a version number and currently must be between v3 and v6. v3-v4 octrees are currently converted to v5 for loading as data nodes (only used for water and lava) were replaced by new per-variant types.","title":"Octree"},{"location":"rendering/scene_format/#octree-format","text":"<version int> <block palette data> <world octree data> <water octree data> <grass tinting data> <foliage tinting data> <water tinting data if version >= 4> The section of code .","title":"Octree Format"},{"location":"rendering/scene_format/#block-palette-data","text":"Stores NBT tags for each block. <version int == 4> <number of block types> <Serialized NBT tags for each block in order>","title":"Block Palette Data"},{"location":"rendering/scene_format/#world-and-water-octree-data","text":"\"octree is pretty complex lol\" \"The octree itself is something like storing it depth first with 0xFFFF FFFF as a node and the type if it is a leaf.\"","title":"World and water Octree Data"},{"location":"rendering/scene_format/#worldtint-textures","text":"Stores tint colors for grass, foliage, and water as WorldTexture. <number of tiles (chunks)> for each tile: <chunk x coordinate int> <chunk y coordinate int> <chunk texture in x major order, rgb as floats in linear color space>","title":"World/Tint Textures"},{"location":"rendering/scene_format/#emittergrid","text":"The .emittergrid is only generated if Emitter Sampling Strategy is set to One or All. Is also GZIP compressed. Version 0 - <version as int> <grid size as int> <cell size as int> for each emitter position <positions as ints, -x, -y, -z corner, +0.5 to get center> for each grid <number of emitters in grid, index of emitters in positions array> Version 1 - <version as int> <cell size as int> <grid offset x> <grid size x> <grid offset y> ... Version 2 - <x,y,z center float, radius as float> for emitter position","title":"Emittergrid"},{"location":"rendering/scene_format/#scene-description-format-sdf","text":"Most of the settings in Chunky scenes are stored in Scene Description files using a JSON -based file format. This page documents the SDF file format. The documentation is currently incomplete, and may lag behind the current Chunky version as new versions are released. Check the version history at the end of this page to see the latest updates made to the SDF documentation. SDF JSON files are stored in the scene directory and the filename is based on the scene name with .json appended. For example, the JSON file for a scene named MyScene would be MyScene.json .","title":"Scene Description Format (SDF)"},{"location":"rendering/scene_format/#structure","text":"","title":"Structure"},{"location":"rendering/scene_format/#general","text":"Key Value range Default value Description sdfVersion Integer 9 Scene Description Format ( SDF ) version name String Scene name width Integer 400 Canvas width height Integer 400 Canvas height yClipMin Integer Clipping world when loading into scene yClipMax Integer Clipping world when loading into scene yMin Integer Slicing map view (impacts octree offset) yMax Integer Slicing map view (impacts octree offset) exposure Number 1 Camera exposure postprocess {\"NONE\", \u201cTONEMAP2\u201d, \"GAMMA\", \"TONEMAP3\", \"TONEMAP1\"} \u201cGAMMA\u201d Tonemapping operator outputMode {\"PNG\", \"TIFF_32\", \u201cPFM\u201d} \u201c PNG \u201d Image output mode renderTime Number Current cumulative rendering time spp Integer Current samples per pixel ( SPP ) sppTarget Integer 1000 Render SPP target rayDepth Integer 5 Ray recursion depth pathTrace Boolean false Rendering mode (true = path tracing, false = preview) dumpFrequency Integer 500 How often the current render state is saved (samples per state save) saveSnapshots Boolean false Whether a snapshot image is saved for each render dump emittersEnabled Boolean false Whether emitters should emit light or not emitterIntensity Number 13.0 Controls intensity of emitters sunEnabled Boolean true Whether the sun should emit light or not stillWater Boolean false Whether water should be still or wavy waterOpacity Number {0 to 1} 0.42 Opacity of water waterVisibility Number 9.0 Distance rays can travel in water in blocks useCustomWaterColor Boolean false Toggle between biome tinted water and custom water color waterColor RGB Object See below fogColor RGB Object See below fastFog Boolean true Faster fog algorithm biomeColorsEnabled Boolean true Enable biome tint transparentSky Boolean false Treat sky as transparent fogDensity Number 0.0 Fog density skyFogDensity Number {0 to 1} 1.0 Controls the amount fog blends into the sky waterWorldEnabled Boolean false Enable water world waterWorldHeight Number 63.0 Controls height of water world waterWorldHeightOffsetEnabled Boolean true Applies Minecraft water offset waterWorldClipEnabled Boolean true renderActors Boolean true world World Object See below camera Camera Object See below sun Sun Object See below sky Sky Object See below cameraPresets Array of Camera Preset Objects See below materials Material Array Object See below chunkList Array of integer arrays Chunks in the scene entities Array of Entity Objects Static entities in the scene, e.g. paintings actors Array of Actor Objects Posable entities such as players. entityLoadingPreferences entityLoadingPreferences Object See below octreeImplementation {\u201cPACKED\u201d, \u201cNODE\u201d, \u201cBIGPACKED\u201d} \u201cPACKED\u201d Octree implementation to use bvhImplementation {\u201cSAH_MA\u201d, \u201cSAH\u201d, \u201cMIDPOINT\u201d} \u201cSAH_MA\u201d BVH implementation to use emitterSamplingStrategy {\u201cNONE\u201d, \u201cONE\u201d, \u201cALL\u201d} \u201cNONE\u201d Enables NEE for emitters for one or all per bounce preventNormalEmitterWithSampling Boolean true Attempts to prevent normal emitters and just use NEE animationTime Number 0.0 renderer {\u201cPathTracingRenderer\u201d} \u201cPathTracingRenderer\u201d Change renderer used for path tracing previewRenderer {\u201cPreviewRenderer\u201d} \u201cPreviewRenderer\u201d Change renderer used for previews additionalData {} {} Unknown","title":"General"},{"location":"rendering/scene_format/#rgb-object","text":"Key Value range red Number {0 to 1} green Number {0 to 1} blue Number {0 to 1}","title":"RGB Object"},{"location":"rendering/scene_format/#world-object","text":"Key Value range path String dimension Integer {0 to 2}","title":"World Object"},{"location":"rendering/scene_format/#camera-object","text":"Key Value range Default value Description name String \u201ccamera 1\u201d position XYZ Object See below orientation Direction Object See below projectionMode {\"PINHOLE\", \"PARALLEL\", \"FISHEYE\", \"STEREOGRAPHIC\", \"PANORAMIC\", \"PANORAMIC_SLOT\", \u201cODS_LEFT\u201d, \u201cODS_RIGHT\u201d} \u201cPINHOLE\u201d Camera projection mode fov Number 70.0 Field of View dof Number \"Infinity\" Depth of Field, also accepts numbers like \"0.0\" focalOffset Number 2.0 Distance to target shift XY Object See XYZ object","title":"Camera Object"},{"location":"rendering/scene_format/#xyz-object","text":"Note - XY Object is a XYZ Object just without the Z component. Key Value range x Number y Number z Number","title":"XYZ Object"},{"location":"rendering/scene_format/#direction-object","text":"Key Value range Description roll Number In radians pitch Number In radians yaw Number In radians","title":"Direction Object"},{"location":"rendering/scene_format/#sun-object","text":"Key Value range Default value Description altitude Number {0 to PI/2} 1.0471975511965976 The direction to the sun above the horizon (60 degrees in radians) azimuth Number {0 to 2PI} 1.2566370614359172 The direction to the sun measured from north (-72 degrees in radians) intensity Number 1.25 Sunlight scaling factor color RGB Object See above drawTexture boolean true Whether to draw the resource pack texture for the sun or not","title":"Sun Object"},{"location":"rendering/scene_format/#sky-object","text":"Key Value range Default value Description skyYaw Number {0 to 2PI} 0.0 Offset angle for the sky map in radians skyMirrored Boolean true Enables mirroring of the skymap at the horizon (use when the vertical skymap angle is 90 degrees) skyLight Number 1.0 Sky light scaling factor mode {\"SIMULATED\", \"SOLID_COLOR\", \u201cGRADIENT\u201d, \u201cSKYMAP_PANORAMIC\u201d, \u201cSKYMAP_SPHERICAL\u201d, \u201cSKYBOX\u201d, \u201cBLACK\u201d} \"SIMULATED\" Sky rendering mode horizonOffset Number 0.0 Offset the horizon to simulate a curved earth. This helps hiding the horizon below distant objects. cloudsEnabled Boolean false Enable clouds cloudSize Number 64.0 Scale cloud map cloudOffset XYZ Object See above gradient Array of Gradient Objects See below color \u201cRGB\u201d Object Not really an RGB object.. but kinda? simulatedSky {\"Preetham\", \u201cNishita\u201d} \"Preetham\" Select method of rendering a simulated sky skyCacheResolution Integer 128 Internal resolution to be used for simulated sky, is interpolated skymap String Path to skymap skybox Array of six Strings Array of six paths to skybox images","title":"Sky Object"},{"location":"rendering/scene_format/#gradient-object","text":"Key Value range rgb String (RGB HEX) pos Number","title":"Gradient Object"},{"location":"rendering/scene_format/#camera-preset-object","text":"Key Value range Default value Description \"camera object: name\" Camera Object \"camera name\" is the value of the name field","title":"Camera Preset Object"},{"location":"rendering/scene_format/#material-array-object","text":"Key Value range Default value Description \"block/entity name\" Material Object Ie \"minecraft:acacia_log\": {...}","title":"Material Array Object"},{"location":"rendering/scene_format/#material-object","text":"Key Value range Default value Description emittance Number {0+} How much light the material emits specular Number {0 to 1} Specular reflection coefficient roughness Number {0 to 1} Blurriness of reflection ior Number Index of refraction metalness Number {0 to 1} Percentage of rays tinted by material color (complex fresnel)","title":"Material Object"},{"location":"rendering/scene_format/#entity-object","text":"Key Value range Default value Description kind String Minecraft entity name position XYZ Object See above rotation Integer Entity rotation design Banner Design Object See below text Array of four Text Objects See below direction Integer Entity rotation material {\u201coak\u201d, \"dark_oak\"} TODO Sign Material art String Minecraft art ID angle Number art angle? Legit just at n90 degrees. placement Integer Head placement? skin String Head texture URL","title":"Entity Object"},{"location":"rendering/scene_format/#banner-design-object","text":"Key Value range Default value Description base Integer Banner base patterns Arrange of Patterns Object See below","title":"Banner Design Object"},{"location":"rendering/scene_format/#patterns-object","text":"Key Value range Default value Description pattern {\"b\", \"bs\", \"ts\", \"ls\", \"rs\", \"cs\", \"ms\", \"drs\", \"dls\", \"ss\", \"cr\", \"sc\", \"ld\", \"rud\", \"lud\", \"rd\", \"vh\", \"vhr\", \"hh\", \"hhb\", \"bl\", \"br\", \"tl\", \"tr\", \"bt\", \"tt\", \"bts\", \"tts\", \"mc\", \"mr\", \"bo\", \"cbo\", \"bri\", \"gra\", \"gru\", \"cre\", \"sku\", \"flo\", \"moj\", \"glb\", \"pig\"} Banner pattern code color Integer","title":"Patterns Object"},{"location":"rendering/scene_format/#text-object","text":"Key Value range text String color Integer","title":"Text Object"},{"location":"rendering/scene_format/#actor-object","text":"Key Value range Default value Description kind String Minecraft posable name position XYZ Object See above scale Number Scale actor headScale Number Scale actor head showArms Boolean Hide/show actor arms gear Array of Gear Objects See below pose Pose Object See below invisible Boolean If actor is invisible noBasePlate Boolean If armour_stand base plate is visible","title":"Actor Object"},{"location":"rendering/scene_format/#gear-object","text":"Key Value range Default value Description head ID_Skin Object \u201chead\u201d OR {\u201cfeet\u201d, \u201clegs\u201d, \u201cchest\u201d} \u201cid\u201d: \u201c...\u201d Minecraft item ID","title":"Gear Object"},{"location":"rendering/scene_format/#id_skin-object","text":"Key Value range Default value Description id String \u201cminecraft:player_head\u201d skin String URL for skin texture","title":"ID_Skin Object"},{"location":"rendering/scene_format/#pose-object","text":"Key Value range Default value Description all Array of three Numbers Array of parts Roll, Pitch, and Yaw head Array of three Numbers Array of parts Roll, Pitch, and Yaw chest Array of three Numbers Array of parts Roll, Pitch, and Yaw leftArm Array of three Numbers Array of parts Roll, Pitch, and Yaw rightArm Array of three Numbers Array of parts Roll, Pitch, and Yaw leftLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw rightLeg Array of three Numbers Array of parts Roll, Pitch, and Yaw","title":"Pose Object"},{"location":"rendering/scene_format/#entityloadingpreferences-object","text":"Key Value range Default value Description se.llbit.chunky.entity.Book true Whether to load book entities se.llbit.chunky.entity.ArmorStand true Whether to load armor stand entities se.llbit.chunky.entity.PaintingEntity true Whether to load painting entities se.llbit.chunky.entity.PlayerEntity true Whether to load player entities other true Whether to load \u201cother\u201d entities","title":"entityLoadingPreferences Object"},{"location":"rendering/scene_format/#scripting","text":"A simple way to process scene files is by using a scripting language like Python. For example, here is a Python script that generates individual scenes for each chunk in a square grid of chunks. The script uses an original scene as template for the new scenes. import json import os.path original_scene = 'D:\\Users\\Jesper\\.chunky\\scenes\\shore-sun.json' scene_dir = os.path.abspath(os.path.join(original_scene, os.pardir)) with open(original_scene, 'r') as f: scene = json.load(f) for x in range(-10, 1): for z in range(110, 119): scene_name = 'chunk_%dx_%dz' % (x, z) scene['name'] = scene_name scene['chunkList'] = [ [ x, z ] ] scene['spp'] = 0 scene['renderTime'] = 0 new_scene = os.path.join(scene_dir, scene_name + '.json') print('Writing scene file %s' % new_scene) with open(new_scene, 'w') as f: json.dump(scene, f)","title":"Scripting"},{"location":"rendering/scene_format/#version-history","text":"Version 2 (Chunky 1.2.0 to 1.2.3) Version 3 (Chunky 1.3-alpha1 to 1.3.3) Version 4 (Chunky 1.3.4) removed clearWater (Boolean) added waterOpacity (Number) added waterVisibility (Number) added waterColor (RGB Object) added useCustomWaterColor (Boolean) Version 5 (Chunky 1.3.5-alpha5) removed atmosphereEnabled (Boolean) removed volumetricFogEnabled (Boolean) added fogDensity (Number) added fogColor (RGB Object) added fastFog (Boolean) Version 6 (Chunky 1.3.5-alpha5) Changed postprocess from Integer to Enum Added outputMode (Enum) Version 7 (Chunky 1.3.8) Added renderActors (Boolean) Added actors (Array of Entity Objects) Version 8 (Chunky 1.4.3) Added materials (material properties) Version 9 (Chunky 1.4.4) Changed entity pose format. Added entity armor items.","title":"Version History"},{"location":"rendering/skymaps/","text":"Skymaps \u00b6 You can change the Sky Mode under the \"Sky & Fog\" tab. There are several types of sky mode you can use from simulated to solid or gradient color or a Skymap. Chunky supports a few different kinds of skymap projections, however \"equirectangular\" projection is the most common type of sky map. It is recommended to use a high resolution skymap in order to avoid the sky looking blurry. However, if the skymap is too large it will take a long time to load. Vertical Resolution \u00b6 Equirectangular skymaps have a 360\u00b0 horizontal resolution and can have a 90\u00b0 or a 180\u00b0 vertical resolution. With 90\u00b0 vertical resolution the skymap will only cover the sky above the horizon, so it is mirrored at the horizon. If the skymap has 180\u00b0 vertical resolution the mirroring is not needed: the skymap will cover both sky and ground. Where to find skymaps \u00b6 These pages provide links to other pages, or downloads of non- HDR skymaps: http://www.reddit.com/r/chunky/comments/17ts4b/some_more_skymaps/ Milky Way Panorama by ESO HDRi Skymaps \u00b6 HDRi skymaps have the advantage that they can be used to provide more realistic outdoor lighting for a scene. Most of these sites provide paid-for skymaps, but many of them have a few free samples available: CGSkies openfootage.net HDRI Haven nordicFX HDRI-Hub.com sIBL Archive hdrmaps.com Light probes by Bernhard Vogl HDRI Skies You can also try searching Google for Panoramic Sky Texture Render a Sky Map with Chunky \u00b6 Chunky can be used to render a sky map. You will need to follow these steps to set up the camera correctly to render a full 360x180 degree sky map: Open the Camera tab in the left panel. Open the Position & Orientation dropdown menu. Enter -90 into the second text field of the Orientation values. Select Panoramic (equirectangular) from the Projection mode dropdown menu. Set the Field of view (zoom) to 180 (max out the slider). Open the Scene tab in the left panel. You must set the canvas width to be twice the canvas height to ensure that the horizontal resolution is 360 degrees. This can be done by entering for example 800x400 in the canvas size text field and hitting Enter . This shows the Camera tab with the correct settings selected. And this is what the resulting render should look like.","title":"Skymaps"},{"location":"rendering/skymaps/#skymaps","text":"You can change the Sky Mode under the \"Sky & Fog\" tab. There are several types of sky mode you can use from simulated to solid or gradient color or a Skymap. Chunky supports a few different kinds of skymap projections, however \"equirectangular\" projection is the most common type of sky map. It is recommended to use a high resolution skymap in order to avoid the sky looking blurry. However, if the skymap is too large it will take a long time to load.","title":"Skymaps"},{"location":"rendering/skymaps/#vertical-resolution","text":"Equirectangular skymaps have a 360\u00b0 horizontal resolution and can have a 90\u00b0 or a 180\u00b0 vertical resolution. With 90\u00b0 vertical resolution the skymap will only cover the sky above the horizon, so it is mirrored at the horizon. If the skymap has 180\u00b0 vertical resolution the mirroring is not needed: the skymap will cover both sky and ground.","title":"Vertical Resolution"},{"location":"rendering/skymaps/#where-to-find-skymaps","text":"These pages provide links to other pages, or downloads of non- HDR skymaps: http://www.reddit.com/r/chunky/comments/17ts4b/some_more_skymaps/ Milky Way Panorama by ESO","title":"Where to find skymaps"},{"location":"rendering/skymaps/#hdri-skymaps","text":"HDRi skymaps have the advantage that they can be used to provide more realistic outdoor lighting for a scene. Most of these sites provide paid-for skymaps, but many of them have a few free samples available: CGSkies openfootage.net HDRI Haven nordicFX HDRI-Hub.com sIBL Archive hdrmaps.com Light probes by Bernhard Vogl HDRI Skies You can also try searching Google for Panoramic Sky Texture","title":"HDRi Skymaps"},{"location":"rendering/skymaps/#render-a-sky-map-with-chunky","text":"Chunky can be used to render a sky map. You will need to follow these steps to set up the camera correctly to render a full 360x180 degree sky map: Open the Camera tab in the left panel. Open the Position & Orientation dropdown menu. Enter -90 into the second text field of the Orientation values. Select Panoramic (equirectangular) from the Projection mode dropdown menu. Set the Field of view (zoom) to 180 (max out the slider). Open the Scene tab in the left panel. You must set the canvas width to be twice the canvas height to ensure that the horizontal resolution is 360 degrees. This can be done by entering for example 800x400 in the canvas size text field and hitting Enter . This shows the Camera tab with the correct settings selected. And this is what the resulting render should look like.","title":"Render a Sky Map with Chunky"},{"location":"user_interface/","text":"User Interface \u00b6 Chunky's UI is built using JavaFX and is separated into three panes which can be slid to increase/decrease screenspace of the different components. These panes often have tabs which contain additional controls. There are three main panes; The left pane handles Render Controls (to be covered on a separate page), the middle pane is for previews (both 2D and 3D), and the right pane is for general options. Map \u00b6 Chunky displays an overhead 2D Map view of your world within the center pane under the Map tab, highlighted in red in the above image, and should be the default view when you launch Chunky. While this view can be used for mapping purposes it's primarily used for making chunk selections for renders much easier. There are two available modes for the Map; At (map) Scale 13 or greater you will be shown individual blocks and for a Scale of 12 or under you will be displayed a biome view. Controls \u00b6 Left click and drag to move the viewport (also see Map View tab) Left click to select/deselect a Chunk (at Scale 16 or higher) or a Region (at Scale 15 or lower) Shift + Left click and drag to create a draggable rectangular chunk selection. Note - Shift does not need to be held continuously only Left click does; On release selection of Chunks is made. Ctrl + Shift + Left click and drag to create a draggable deselection rectangular area Mouse wheel to change Map Scale (also see Map View tab) Right click to open a menu with some Selection and Render related options Prior to left-clicking an outline of the highlighted Chunk will be shown. After left-clicking the outline will be filled in and Selected. Prior to left-clicking an outline of the highlighted Region will be shown. After left-clicking the Region outline will be filled in and Selected. Draggable selection Right click menu Biome view \u00b6 As mentioned before, at Scale 12 or below Chunky will auto display a biome overview opposed to a block overview. Right click menu \u00b6 The right click menu provides some selection and render related controls. New scene from selection - Create a new 3d scene from selection Clear selection - Clears the selection Move camera here - Moves camera to the coordinates of the right click Select camera-visible chunks - Selects chunks visible to 3d camera frustum and within the Maps current viewport. An example of the view frustum can be seen below. Map View tab \u00b6 This tab allows you to pick the world and dimension you wish to view and a few options on how to view it. Current World - Displays the currently selected Minecraft world Change World - Opens prompt to select a Minecraft world Reload - Reloads currently selected Minecraft world Dimension - Displays the different dimensions of Minecraft if available. Scale - Adjusts the current area of view of the 2D Map Min Y level Max Y level Coordinates - Provides X,Z coordinates of the Maps view track player - Centers Maps view on players position track camera - Centers Maps view on 3D Cameras position Select World \u00b6 World list - Reads the worlds in your Minecraft directory and displays a table of results. World name, Directory, (Game)Mode, and Seed. Change world directory - Allows you to pick a different directory Browse for another world - Allows you to locate a world Load selected world - Loads selected world Chunks Tab \u00b6 This tab provides access to chunk related features. Clear selection - Clears current selection Export chunks to ZIP - Exports selected chunks to a .ZIP archive Export view to PNG - Exports current map view to a . PNG image Delete selected chunks - WARNING - Deletes currently selected chunks. Chunks will be generated again when the world is opened again in Minecraft. Chunky is NOT responsible if you do not have a backup. Options Tab \u00b6 This tab has a few options in it... Edit resource packs - Allows you to select a Resource Pack .zip or Minecraft .jar for textures. Disable default textures (needs restart) Single color textures (needs restart) - Averages block textures into single color. Show launcher when starting Chunky - Toggles whether the Chunky launcher shows when starting Chunky. Open Scenes Directory - Opens the directory Chunky uses to store scenes. Change Scenes Directory - Changes folder used for the scenes' directory. Resource Packs \u00b6 Items higher in the list take priority over lower items. Up - Move selected pack up Down - Move selected pack down Add - Add new pack Remove - Remove selected pack Apply - Apply changes How to correctly add resource packs \u00b6 Add Select either a .zip or a minecraft .jar (found within .minecraft/versions/x/x.jar) Left Click a resource pack in the list and use Up / Down to move resource packs. Packs higher in the list will take priority over those below, including the latest Minecraft .jar which should be loaded by default (would be noted in the debug console ). Apply You may need to hit Reload under the Map View Tab and/or Reload Chunks if you have an active render; This should be done automatically... About Tab \u00b6 The About tab has a few useful links in addition to Chunky's copyright and credits.","title":"User Interface"},{"location":"user_interface/#user-interface","text":"Chunky's UI is built using JavaFX and is separated into three panes which can be slid to increase/decrease screenspace of the different components. These panes often have tabs which contain additional controls. There are three main panes; The left pane handles Render Controls (to be covered on a separate page), the middle pane is for previews (both 2D and 3D), and the right pane is for general options.","title":"User Interface"},{"location":"user_interface/#map","text":"Chunky displays an overhead 2D Map view of your world within the center pane under the Map tab, highlighted in red in the above image, and should be the default view when you launch Chunky. While this view can be used for mapping purposes it's primarily used for making chunk selections for renders much easier. There are two available modes for the Map; At (map) Scale 13 or greater you will be shown individual blocks and for a Scale of 12 or under you will be displayed a biome view.","title":"Map"},{"location":"user_interface/#controls","text":"Left click and drag to move the viewport (also see Map View tab) Left click to select/deselect a Chunk (at Scale 16 or higher) or a Region (at Scale 15 or lower) Shift + Left click and drag to create a draggable rectangular chunk selection. Note - Shift does not need to be held continuously only Left click does; On release selection of Chunks is made. Ctrl + Shift + Left click and drag to create a draggable deselection rectangular area Mouse wheel to change Map Scale (also see Map View tab) Right click to open a menu with some Selection and Render related options Prior to left-clicking an outline of the highlighted Chunk will be shown. After left-clicking the outline will be filled in and Selected. Prior to left-clicking an outline of the highlighted Region will be shown. After left-clicking the Region outline will be filled in and Selected. Draggable selection Right click menu","title":"Controls"},{"location":"user_interface/#biome-view","text":"As mentioned before, at Scale 12 or below Chunky will auto display a biome overview opposed to a block overview.","title":"Biome view"},{"location":"user_interface/#right-click-menu","text":"The right click menu provides some selection and render related controls. New scene from selection - Create a new 3d scene from selection Clear selection - Clears the selection Move camera here - Moves camera to the coordinates of the right click Select camera-visible chunks - Selects chunks visible to 3d camera frustum and within the Maps current viewport. An example of the view frustum can be seen below.","title":"Right click menu"},{"location":"user_interface/#map-view-tab","text":"This tab allows you to pick the world and dimension you wish to view and a few options on how to view it. Current World - Displays the currently selected Minecraft world Change World - Opens prompt to select a Minecraft world Reload - Reloads currently selected Minecraft world Dimension - Displays the different dimensions of Minecraft if available. Scale - Adjusts the current area of view of the 2D Map Min Y level Max Y level Coordinates - Provides X,Z coordinates of the Maps view track player - Centers Maps view on players position track camera - Centers Maps view on 3D Cameras position","title":"Map View tab"},{"location":"user_interface/#select-world","text":"World list - Reads the worlds in your Minecraft directory and displays a table of results. World name, Directory, (Game)Mode, and Seed. Change world directory - Allows you to pick a different directory Browse for another world - Allows you to locate a world Load selected world - Loads selected world","title":"Select World"},{"location":"user_interface/#chunks-tab","text":"This tab provides access to chunk related features. Clear selection - Clears current selection Export chunks to ZIP - Exports selected chunks to a .ZIP archive Export view to PNG - Exports current map view to a . PNG image Delete selected chunks - WARNING - Deletes currently selected chunks. Chunks will be generated again when the world is opened again in Minecraft. Chunky is NOT responsible if you do not have a backup.","title":"Chunks Tab"},{"location":"user_interface/#options-tab","text":"This tab has a few options in it... Edit resource packs - Allows you to select a Resource Pack .zip or Minecraft .jar for textures. Disable default textures (needs restart) Single color textures (needs restart) - Averages block textures into single color. Show launcher when starting Chunky - Toggles whether the Chunky launcher shows when starting Chunky. Open Scenes Directory - Opens the directory Chunky uses to store scenes. Change Scenes Directory - Changes folder used for the scenes' directory.","title":"Options Tab"},{"location":"user_interface/#resource-packs","text":"Items higher in the list take priority over lower items. Up - Move selected pack up Down - Move selected pack down Add - Add new pack Remove - Remove selected pack Apply - Apply changes","title":"Resource Packs"},{"location":"user_interface/#how-to-correctly-add-resource-packs","text":"Add Select either a .zip or a minecraft .jar (found within .minecraft/versions/x/x.jar) Left Click a resource pack in the list and use Up / Down to move resource packs. Packs higher in the list will take priority over those below, including the latest Minecraft .jar which should be loaded by default (would be noted in the debug console ). Apply You may need to hit Reload under the Map View Tab and/or Reload Chunks if you have an active render; This should be done automatically...","title":"How to correctly add resource packs"},{"location":"user_interface/#about-tab","text":"The About tab has a few useful links in addition to Chunky's copyright and credits.","title":"About Tab"},{"location":"user_interface/headless/","text":"Headless Rendering \u00b6 Headless rendering in Chunky can be used to render scenes without using the Graphical user interface ( GUI ), and is useful for example when rendering on a server or when automating or scripting renders. Chunky Launcher \u00b6 When working with Chunky from the command line, you should be aware of what the launcher does. The launcher is responsible for launching Chunky by starting a new Java process. It also ensures that the file size and the md5 checksum of the Chunky version you are attempting to run. Command-line arguments that start with one dash, like -snapshot are sent to Chunky, while arguments starting with two dashes, like --update , are options to the launcher. JVM options \u00b6 JVM (Java virtual machine) options (memory limit, etc.) used when starting Chunky normally only apply to the launcher and not the actually Chunky process. Any JVM options you want to add to the Chunky command must be added to the javaOptions variable in the chunky-launcher.json file in your local Chunky settings directory ( ~/.chunky is the default directory). To see the Java command line arguments used to start Chunky you can add the --verbose flag when running Chunky. This makes the launcher print the command it used to start Chunky. Custom settings directory \u00b6 Chunky allows specifying a custom settings directory via the chunky.home Java property. The property can be passed to the Chunky launcher and the launcher will then pass it on to Chunky itself. Changing the settings directory can be useful if you need to run multiple instances of Chunky on the same computer, or if you just need more control over where the settings and scenes are stored. Here is an example showing how to specify a custom scene directory: $ mkdir ~/chunky $ java -Dchunky.home=\"~/chunky\" -jar ChunkyLauncher.jar --update Note that the -Dchunky.home argument must be passed before -jar . If you are using Bash it is convenient to make an alias for the java command above, for example: CHUNKY_HOME=~/chunky alias chunky java -Dchunky.home=\"$CHUNKY_HOME\" -jar ChunkyLauncher.jar The lines above could also be added to your .bashrc file. Setting things up \u00b6 It may be necessary to do some setup before you can start rendering in headless mode. The following steps should be done before the first time you start rendering in headless mode, and some of these steps may need to be repeated later to update Chunky or Minecraft: Download Chunky and place the Jar-file on your rendering machine. It is sufficient to download the latest version of the Launcher by issuing this command: wget https://chunkyupdate.lemaik.de/ChunkyLauncher.jar Download the latest version of Chunky: java -jar ChunkyLauncher.jar --update Make Chunky download some Minecraft version (for example 1.11.2): java -jar ChunkyLauncher.jar -download-mc 1.11.2 Rendering \u00b6 Rendering a scene using the command-line interface is simple, assuming that you have set up the scene parameters and copied your scene files to your scene directory (default= $CHUNKY_HOME/scenes ). The simplest way to render a scene is to run the command chunky -render SceneName Replace SceneName with the name of your scene. Run this command to print a list of all available scenes: chunky -list-scenes Chunky will keep rendering until it reaches the target SPP . You can stop Chunky prematurely by hitting Ctrl-C , however this does not save the current rendering progress! The render progress is normally saved after intervals determined by the dumpFrequency scene setting. Snapshots can be created from a scene with some saved rendering progress by using the -snapshot command: chunky -snapshot SceneName snapshot.png The snapshot.png part of is the filename for the Png file to create. Command-Line Options \u00b6 Run Chunky with the -help command to see a list of all available command-line options. Currently these options are available: -render <SCENE> - Render in headless mode. You may also need to add the -f flag to force a scene to render. -texture <FILE> - Load the specified texture pack. -snapshot <SCENE> <PNG> - create a snapshot from a scene. -scene-dir <DIR> - Specify scene directory. -threads <NUM> - Change number of render threads. -tile-width <NUM> - Modifies the frame subdivision size per worker threads. -spp-per-pass <NUM> - Modifies the samples to be completed per tile per pass. -target <NUM> - Set the SPP target for the current headless render. -set <NAME> <VALUE> - Modify a Chunky setting value. -set <NAME> <VALUE> <SCENE> - Modify a scene setting. -reset <NAME> - Reset a Chunky setting to its default value. -reset <NAME> <SCENE> - Reset a scene setting to its default value. -download-mc <VERSION> - Download a particular version of Minecraft. -list-scenes - List available scenes in the scene directory. -merge-dump <SCENE> <PATH> - Merge a render .dump file into the specified scene combining the total SPP 1 . -help - Print the command-line help and Copyright notice. The launcher accepts these commands: --update - Download the latest version of Chunky. --setup - Interactive command-line Chunky setup. --nolauncher - Should not be used in headless mode. --launcher - Force the launcher UI to be shown. --version - Display the launcher version. --verbose - Enable verbose logging. Make sure that the SPP Target of the specified scene is greater than the sum of the current SPP for the scene and dump you are merging. Otherwise there may be unexpected behaviour... \u21a9","title":"Headless"},{"location":"user_interface/headless/#headless-rendering","text":"Headless rendering in Chunky can be used to render scenes without using the Graphical user interface ( GUI ), and is useful for example when rendering on a server or when automating or scripting renders.","title":"Headless Rendering"},{"location":"user_interface/headless/#chunky-launcher","text":"When working with Chunky from the command line, you should be aware of what the launcher does. The launcher is responsible for launching Chunky by starting a new Java process. It also ensures that the file size and the md5 checksum of the Chunky version you are attempting to run. Command-line arguments that start with one dash, like -snapshot are sent to Chunky, while arguments starting with two dashes, like --update , are options to the launcher.","title":"Chunky Launcher"},{"location":"user_interface/headless/#jvm-options","text":"JVM (Java virtual machine) options (memory limit, etc.) used when starting Chunky normally only apply to the launcher and not the actually Chunky process. Any JVM options you want to add to the Chunky command must be added to the javaOptions variable in the chunky-launcher.json file in your local Chunky settings directory ( ~/.chunky is the default directory). To see the Java command line arguments used to start Chunky you can add the --verbose flag when running Chunky. This makes the launcher print the command it used to start Chunky.","title":"JVM options"},{"location":"user_interface/headless/#custom-settings-directory","text":"Chunky allows specifying a custom settings directory via the chunky.home Java property. The property can be passed to the Chunky launcher and the launcher will then pass it on to Chunky itself. Changing the settings directory can be useful if you need to run multiple instances of Chunky on the same computer, or if you just need more control over where the settings and scenes are stored. Here is an example showing how to specify a custom scene directory: $ mkdir ~/chunky $ java -Dchunky.home=\"~/chunky\" -jar ChunkyLauncher.jar --update Note that the -Dchunky.home argument must be passed before -jar . If you are using Bash it is convenient to make an alias for the java command above, for example: CHUNKY_HOME=~/chunky alias chunky java -Dchunky.home=\"$CHUNKY_HOME\" -jar ChunkyLauncher.jar The lines above could also be added to your .bashrc file.","title":"Custom settings directory"},{"location":"user_interface/headless/#setting-things-up","text":"It may be necessary to do some setup before you can start rendering in headless mode. The following steps should be done before the first time you start rendering in headless mode, and some of these steps may need to be repeated later to update Chunky or Minecraft: Download Chunky and place the Jar-file on your rendering machine. It is sufficient to download the latest version of the Launcher by issuing this command: wget https://chunkyupdate.lemaik.de/ChunkyLauncher.jar Download the latest version of Chunky: java -jar ChunkyLauncher.jar --update Make Chunky download some Minecraft version (for example 1.11.2): java -jar ChunkyLauncher.jar -download-mc 1.11.2","title":"Setting things up"},{"location":"user_interface/headless/#rendering","text":"Rendering a scene using the command-line interface is simple, assuming that you have set up the scene parameters and copied your scene files to your scene directory (default= $CHUNKY_HOME/scenes ). The simplest way to render a scene is to run the command chunky -render SceneName Replace SceneName with the name of your scene. Run this command to print a list of all available scenes: chunky -list-scenes Chunky will keep rendering until it reaches the target SPP . You can stop Chunky prematurely by hitting Ctrl-C , however this does not save the current rendering progress! The render progress is normally saved after intervals determined by the dumpFrequency scene setting. Snapshots can be created from a scene with some saved rendering progress by using the -snapshot command: chunky -snapshot SceneName snapshot.png The snapshot.png part of is the filename for the Png file to create.","title":"Rendering"},{"location":"user_interface/headless/#command-line-options","text":"Run Chunky with the -help command to see a list of all available command-line options. Currently these options are available: -render <SCENE> - Render in headless mode. You may also need to add the -f flag to force a scene to render. -texture <FILE> - Load the specified texture pack. -snapshot <SCENE> <PNG> - create a snapshot from a scene. -scene-dir <DIR> - Specify scene directory. -threads <NUM> - Change number of render threads. -tile-width <NUM> - Modifies the frame subdivision size per worker threads. -spp-per-pass <NUM> - Modifies the samples to be completed per tile per pass. -target <NUM> - Set the SPP target for the current headless render. -set <NAME> <VALUE> - Modify a Chunky setting value. -set <NAME> <VALUE> <SCENE> - Modify a scene setting. -reset <NAME> - Reset a Chunky setting to its default value. -reset <NAME> <SCENE> - Reset a scene setting to its default value. -download-mc <VERSION> - Download a particular version of Minecraft. -list-scenes - List available scenes in the scene directory. -merge-dump <SCENE> <PATH> - Merge a render .dump file into the specified scene combining the total SPP 1 . -help - Print the command-line help and Copyright notice. The launcher accepts these commands: --update - Download the latest version of Chunky. --setup - Interactive command-line Chunky setup. --nolauncher - Should not be used in headless mode. --launcher - Force the launcher UI to be shown. --version - Display the launcher version. --verbose - Enable verbose logging. Make sure that the SPP Target of the specified scene is greater than the sum of the current SPP for the scene and dump you are merging. Otherwise there may be unexpected behaviour... \u21a9","title":"Command-Line Options"},{"location":"user_interface/style/","text":"Theming Chunky via Style.css \u00b6 Chunky, and not Chunky Launcher, may be styled by adding a custom style.css to the Settings directory (by default it is .chunky ). This allows you to customise the theme of Chunky for whatever reason you may want to; Ranging from matching your system theme to... more extremes... Template \u00b6 Below you will find a template style.css which you can use as a basis for your theme. This style.css is used as the default for Chunky and can be found within the Chunky GitHub repository. .root { -fx-base: rgb(30,30,30); -fx-background: rgb(20,20,20); -fx-control-inner-background: rgb(40, 40, 40); -fx-accent: orange; -fx-focus-color: orange; } ProgressBar { -fx-control-inner-background: rgb(30, 30, 30); -fx-progress-color: orange; } ToggleButton:selected { -fx-background-color: rgb(80,80,80); } Button { -fx-text-fill: #faebd7; } ToggleButton { -fx-text-fill: #faebd7; } CheckBox { -fx-text-fill: #faebd7; } Label { -fx-text-fill: #faebd7; } Text { -fx-fill: #faebd7; } Hyperlink { -fx-text-fill: orange; -fx-underline: false; } Hyperlink:visited { -fx-text-fill: orange; } Hyperlink:hover { -fx-text-fill: #faebd7; -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; } Beyond the template \u00b6 Customisation is not limited to what is in the template. An example would be with fx-background-image which can be used to add images or gifs to the UI. For full documentation please see the JavaFX CSS Reference Guide . Example Themes \u00b6 Light \u00b6 Created by jackjt8 - Sorry .root { -fx-base: rgb(225,225,225); -fx-background: rgb(235,235,235); -fx-control-inner-background: rgb(215, 215, 215); -fx-accent: orange; -fx-focus-color: orange; } ProgressBar { -fx-control-inner-background: rgb(225, 225, 225); -fx-progress-color: orange; } ToggleButton:selected { -fx-background-color: rgb(175,175,175); } Button { -fx-text-fill: #080501; } ToggleButton { -fx-text-fill: #080501; } CheckBox { -fx-text-fill: #080501; } Label { -fx-text-fill: #080501; } Text { -fx-fill: #080501; } Hyperlink { -fx-text-fill: orange; -fx-underline: false; } Hyperlink:visited { -fx-text-fill: orange; } Hyperlink:hover { -fx-text-fill: #080501; -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; } Nice Blue \u00b6 Created by EmeraldSnorlax - MIA .root { -fx-base: rgb(2, 5, 5); -fx-background: rgb(2, 5, 5); -fx-control-inner-background: #222B2E; -fx-accent: rgb(17,122,101); -fx-focus-color: rgb(17,122,101); } ProgressBar { -fx-control-inner-background: rgb(21,67,96); -fx-progress-color: rgb(17,122,101); } ToggleButton:selected { -fx-background-color: #29A189; } Button { -fx-text-fill: #faebd7; } ToggleButton { -fx-text-fill: #faebd7; } CheckBox { -fx-text-fill: #faebd7; } Label { -fx-text-fill: #faebd7; } Text { -fx-fill: #faebd7; } Hyperlink { -fx-text-fill: rgb(17,122,101); -fx-underline: false; } Hyperlink:visited { -fx-text-fill: rgb(17,122,101); } Hyperlink:hover { -fx-text-fill: rgb(21,67,96); -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; }","title":"Theming"},{"location":"user_interface/style/#theming-chunky-via-stylecss","text":"Chunky, and not Chunky Launcher, may be styled by adding a custom style.css to the Settings directory (by default it is .chunky ). This allows you to customise the theme of Chunky for whatever reason you may want to; Ranging from matching your system theme to... more extremes...","title":"Theming Chunky via Style.css"},{"location":"user_interface/style/#template","text":"Below you will find a template style.css which you can use as a basis for your theme. This style.css is used as the default for Chunky and can be found within the Chunky GitHub repository. .root { -fx-base: rgb(30,30,30); -fx-background: rgb(20,20,20); -fx-control-inner-background: rgb(40, 40, 40); -fx-accent: orange; -fx-focus-color: orange; } ProgressBar { -fx-control-inner-background: rgb(30, 30, 30); -fx-progress-color: orange; } ToggleButton:selected { -fx-background-color: rgb(80,80,80); } Button { -fx-text-fill: #faebd7; } ToggleButton { -fx-text-fill: #faebd7; } CheckBox { -fx-text-fill: #faebd7; } Label { -fx-text-fill: #faebd7; } Text { -fx-fill: #faebd7; } Hyperlink { -fx-text-fill: orange; -fx-underline: false; } Hyperlink:visited { -fx-text-fill: orange; } Hyperlink:hover { -fx-text-fill: #faebd7; -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; }","title":"Template"},{"location":"user_interface/style/#beyond-the-template","text":"Customisation is not limited to what is in the template. An example would be with fx-background-image which can be used to add images or gifs to the UI. For full documentation please see the JavaFX CSS Reference Guide .","title":"Beyond the template"},{"location":"user_interface/style/#example-themes","text":"","title":"Example Themes"},{"location":"user_interface/style/#light","text":"Created by jackjt8 - Sorry .root { -fx-base: rgb(225,225,225); -fx-background: rgb(235,235,235); -fx-control-inner-background: rgb(215, 215, 215); -fx-accent: orange; -fx-focus-color: orange; } ProgressBar { -fx-control-inner-background: rgb(225, 225, 225); -fx-progress-color: orange; } ToggleButton:selected { -fx-background-color: rgb(175,175,175); } Button { -fx-text-fill: #080501; } ToggleButton { -fx-text-fill: #080501; } CheckBox { -fx-text-fill: #080501; } Label { -fx-text-fill: #080501; } Text { -fx-fill: #080501; } Hyperlink { -fx-text-fill: orange; -fx-underline: false; } Hyperlink:visited { -fx-text-fill: orange; } Hyperlink:hover { -fx-text-fill: #080501; -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; }","title":"Light"},{"location":"user_interface/style/#nice-blue","text":"Created by EmeraldSnorlax - MIA .root { -fx-base: rgb(2, 5, 5); -fx-background: rgb(2, 5, 5); -fx-control-inner-background: #222B2E; -fx-accent: rgb(17,122,101); -fx-focus-color: rgb(17,122,101); } ProgressBar { -fx-control-inner-background: rgb(21,67,96); -fx-progress-color: rgb(17,122,101); } ToggleButton:selected { -fx-background-color: #29A189; } Button { -fx-text-fill: #faebd7; } ToggleButton { -fx-text-fill: #faebd7; } CheckBox { -fx-text-fill: #faebd7; } Label { -fx-text-fill: #faebd7; } Text { -fx-fill: #faebd7; } Hyperlink { -fx-text-fill: rgb(17,122,101); -fx-underline: false; } Hyperlink:visited { -fx-text-fill: rgb(17,122,101); } Hyperlink:hover { -fx-text-fill: rgb(21,67,96); -fx-underline: true; } .text-field.invalid { -fx-text-fill: #FF434A; -fx-text-box-border: #FF434A; -fx-focus-color: #FF434A; } .menu-item:disabled:focused { -fx-background: unset; -fx-background-color: transparent; } .menu-item:disabled:focused > .label { -fx-text-fill: white; }","title":"Nice Blue"},{"location":"user_interface/render/","text":"This page no longer exists. \u00b6 Unlike previous guides Render Controls has been broken out into seperate pages. This page only exists as a redirection point to the parts of the guide that exist. Render Controls \u00b6 Scene Lighting Sky & Fog Water Camera Entities Materials Postprocessing Advanced Help Render Preview","title":"This page no longer exists."},{"location":"user_interface/render/#this-page-no-longer-exists","text":"Unlike previous guides Render Controls has been broken out into seperate pages. This page only exists as a redirection point to the parts of the guide that exist.","title":"This page no longer exists."},{"location":"user_interface/render/#render-controls","text":"Scene Lighting Sky & Fog Water Camera Entities Materials Postprocessing Advanced Help Render Preview","title":"Render Controls"},{"location":"user_interface/render/advanced/","text":"Render Controls - Advanced \u00b6 CPU usage controls \u00b6 Render threads - Changes the number of threads Chunky should use while rendering. (Needs restart) CPU utilization - Adds in sleep cycles to the rendering process to attempt to reduce the CPU usage. Would recommend using Render threads for more predictable scaling. Some quality/performance related options \u00b6 Ray depth - Controls the number of times a ray is allowed to bounce without striking a light source before killed. For outdoor scenes a value between 3-5 should typically be enough with indoor scenes benefiting more from higher values around 10. Higher values offer more realistic light bounce however at a cost to render time. Balance this carefully. -- Merge render dump - Useful for multi-PC rendering. Merges a renders .dump file into the currently loaded scene combining the total SPP 1 . Shutdown computer when render completes - Toggleable Fast Fog - Impacts the quality of fog rendering. Typically, only noticeable if viewing fog through alpha textures which is rare. Sky cache resolution - Resolution of the rendered simulated sky. Lower values may boost rendering performance at the cost of sky model accuracy. Default 128. Snapshot output format \u00b6 Output mode - PNG (default), TIFF, 32-bit floating point , PFM, Portable FloatMap (32-bit) Advanced Octree, BVH , and ESS options \u00b6 Octree implementation - PACKED (default), BIGPACKED , NODE (legacy) BVH build method - SAH_MA (default), SAH , MIDPOINT Emitter grid size - Controls size of emitter grid used for ESS . Prevent normal emitter when using emitter sampling - Attempts to disable typical random emitter hits which would reduce noise. Manual renderer selection \u00b6 Renderer - PathTracingRenderer - No other renderers are bundled. See plugins. Preview Renderer - PreviewRenderer - No other renderers are bundled. See plugins. Make sure that the SPP Target of the specified scene is greater than the sum of the current SPP for the scene and dump you are merging. Otherwise, there may be unexpected behaviour... \u21a9","title":"Advanced"},{"location":"user_interface/render/advanced/#render-controls-advanced","text":"","title":"Render Controls - Advanced"},{"location":"user_interface/render/advanced/#cpu-usage-controls","text":"Render threads - Changes the number of threads Chunky should use while rendering. (Needs restart) CPU utilization - Adds in sleep cycles to the rendering process to attempt to reduce the CPU usage. Would recommend using Render threads for more predictable scaling.","title":"CPU usage controls"},{"location":"user_interface/render/advanced/#some-qualityperformance-related-options","text":"Ray depth - Controls the number of times a ray is allowed to bounce without striking a light source before killed. For outdoor scenes a value between 3-5 should typically be enough with indoor scenes benefiting more from higher values around 10. Higher values offer more realistic light bounce however at a cost to render time. Balance this carefully. -- Merge render dump - Useful for multi-PC rendering. Merges a renders .dump file into the currently loaded scene combining the total SPP 1 . Shutdown computer when render completes - Toggleable Fast Fog - Impacts the quality of fog rendering. Typically, only noticeable if viewing fog through alpha textures which is rare. Sky cache resolution - Resolution of the rendered simulated sky. Lower values may boost rendering performance at the cost of sky model accuracy. Default 128.","title":"Some quality/performance related options"},{"location":"user_interface/render/advanced/#snapshot-output-format","text":"Output mode - PNG (default), TIFF, 32-bit floating point , PFM, Portable FloatMap (32-bit)","title":"Snapshot output format"},{"location":"user_interface/render/advanced/#advanced-octree-bvh-and-ess-options","text":"Octree implementation - PACKED (default), BIGPACKED , NODE (legacy) BVH build method - SAH_MA (default), SAH , MIDPOINT Emitter grid size - Controls size of emitter grid used for ESS . Prevent normal emitter when using emitter sampling - Attempts to disable typical random emitter hits which would reduce noise.","title":"Advanced Octree, BVH, and ESS options"},{"location":"user_interface/render/advanced/#manual-renderer-selection","text":"Renderer - PathTracingRenderer - No other renderers are bundled. See plugins. Preview Renderer - PreviewRenderer - No other renderers are bundled. See plugins. Make sure that the SPP Target of the specified scene is greater than the sum of the current SPP for the scene and dump you are merging. Otherwise, there may be unexpected behaviour... \u21a9","title":"Manual renderer selection"},{"location":"user_interface/render/camera/","text":"Render Controls - Camera \u00b6 Camera General \u00b6 Load preset - Loads a camera preset: Isometric [NW, NE, SE, SW] , Skybox [Right, Left, Up, Down, Front (North), Back] . Isometric modes set the camera projection mode to parallel with the camera aimed down at 45 degrees towards the center of the currently loaded chunks. Yaw depends on preset selected. Skybox - From the center of the currently loaded chunks look towards that cardinal direction and sets the FoV to 90 degrees. Camera - Allows a scene to have multiple independent cameras which can have different properties. Clone - Clones selected camera Remove - Removes selected camera Camera Controls \u00b6 Position & Orientation Position - Defines the X, Y, Z, coordinates of the Camera. These coordinates correlate with the Minecraft world positions. Orientation - Yaw, Pitch, Roll Lense shift - Horizontal lense shift and Vertical lense shift - Relative to canvas height. Camera to player - Moves the selected camera to the \"players\" position and inherit the direction the player is facing. Which one? No clue. Center camera - Moves the camera to the centre of the loaded world and faces the camera to the ground. Projection modes \u00b6 Projection mode Standard - Default pinhole projection works like a normal camera. Parallel - Removes all perspective such that all blocks are the same size regardless of distance to camera. Fisheye - This projection makes is like an extreme wide angle lens which distorts images. Stereographic - Stereographic projection maps points on the sphere to a plane. If you want tiny planets this is one good way to achieve them. Panoramic (equirectangular) - Similar to standard/pinhole projection. Panoramic (slot) - Behaves like a pinhole camera in the vertical direction, but like a spherical one in the horizontal direction. Omni-deirctional Stereo (left/right eye) - This projection can create distinct images for viewing on VR devices by factoring the inter-pupillary distance in. Some lines may appear slightly curved. Depth of Field \u00b6 Field of view (zoom) - Controls the field of view in the virtual camera. Lower causes a narrower field of view (higher magnification) and high value will result in a wider field of view (low magnification). 70 is the default value, which corresponds with Minecraft's normal field of view. Depth of field - The depth of field controls the level of blurriness of objects in the scene which are not in focus. A low value will result in lots of blur while a low value will leave the whole image looking fairly sharp. Setting this value to infinite will completely remove the depth of field making the whole image perfectly sharp, this is also the default setting. Subject distance - Focal offset decides how far the focal plane is from the camera. If you want to focus an object that is 20 blocks away the focal plane should be set to 20. Estimating the distance (in blocks) to a given object is a good way to make an initial guess for the correct focal offset setting. Or by using the \"Autofocus\" button below. Objects at this range will appear perfectly sharp even if DOF is set to a low value. Autofocus - Sets the Focal Offset and Depth of Field to the cross-hair which is typically in the middle of the Render Preview unless Set Target is used. Aperture Shape \u00b6 Snapshot 2.5.0 Change mask used to define the shape of the aperture. Creates more interesting bokeh/Depth of Field. Default is Circle with included options for Hexagon , Pentagon , Star , and Gaussian . User defined via a file picker if you select Custom .","title":"Camera"},{"location":"user_interface/render/camera/#render-controls-camera","text":"","title":"Render Controls - Camera"},{"location":"user_interface/render/camera/#camera-general","text":"Load preset - Loads a camera preset: Isometric [NW, NE, SE, SW] , Skybox [Right, Left, Up, Down, Front (North), Back] . Isometric modes set the camera projection mode to parallel with the camera aimed down at 45 degrees towards the center of the currently loaded chunks. Yaw depends on preset selected. Skybox - From the center of the currently loaded chunks look towards that cardinal direction and sets the FoV to 90 degrees. Camera - Allows a scene to have multiple independent cameras which can have different properties. Clone - Clones selected camera Remove - Removes selected camera","title":"Camera General"},{"location":"user_interface/render/camera/#camera-controls","text":"Position & Orientation Position - Defines the X, Y, Z, coordinates of the Camera. These coordinates correlate with the Minecraft world positions. Orientation - Yaw, Pitch, Roll Lense shift - Horizontal lense shift and Vertical lense shift - Relative to canvas height. Camera to player - Moves the selected camera to the \"players\" position and inherit the direction the player is facing. Which one? No clue. Center camera - Moves the camera to the centre of the loaded world and faces the camera to the ground.","title":"Camera Controls"},{"location":"user_interface/render/camera/#projection-modes","text":"Projection mode Standard - Default pinhole projection works like a normal camera. Parallel - Removes all perspective such that all blocks are the same size regardless of distance to camera. Fisheye - This projection makes is like an extreme wide angle lens which distorts images. Stereographic - Stereographic projection maps points on the sphere to a plane. If you want tiny planets this is one good way to achieve them. Panoramic (equirectangular) - Similar to standard/pinhole projection. Panoramic (slot) - Behaves like a pinhole camera in the vertical direction, but like a spherical one in the horizontal direction. Omni-deirctional Stereo (left/right eye) - This projection can create distinct images for viewing on VR devices by factoring the inter-pupillary distance in. Some lines may appear slightly curved.","title":"Projection modes"},{"location":"user_interface/render/camera/#depth-of-field","text":"Field of view (zoom) - Controls the field of view in the virtual camera. Lower causes a narrower field of view (higher magnification) and high value will result in a wider field of view (low magnification). 70 is the default value, which corresponds with Minecraft's normal field of view. Depth of field - The depth of field controls the level of blurriness of objects in the scene which are not in focus. A low value will result in lots of blur while a low value will leave the whole image looking fairly sharp. Setting this value to infinite will completely remove the depth of field making the whole image perfectly sharp, this is also the default setting. Subject distance - Focal offset decides how far the focal plane is from the camera. If you want to focus an object that is 20 blocks away the focal plane should be set to 20. Estimating the distance (in blocks) to a given object is a good way to make an initial guess for the correct focal offset setting. Or by using the \"Autofocus\" button below. Objects at this range will appear perfectly sharp even if DOF is set to a low value. Autofocus - Sets the Focal Offset and Depth of Field to the cross-hair which is typically in the middle of the Render Preview unless Set Target is used.","title":"Depth of Field"},{"location":"user_interface/render/camera/#aperture-shape","text":"Snapshot 2.5.0 Change mask used to define the shape of the aperture. Creates more interesting bokeh/Depth of Field. Default is Circle with included options for Hexagon , Pentagon , Star , and Gaussian . User defined via a file picker if you select Custom .","title":"Aperture Shape"},{"location":"user_interface/render/entities/","text":"Render Controls - Entities \u00b6 The entities tab lets you create, pose, and remove entities within the scene. Entity controls \u00b6 Entity table - Stores a list of Entities that have been loaded and added by the user. - - Remove selected entity + - Add new player entity at target (cross-hair) Camera to entity - Teleports current camera to the selected entities position Player to camera - Moves selected entity to camera position Entity to target - Moves selected entity to target (cross-hair) Face camera - Rotates selected entities head to face camera [Bugged] Face target - Rotates selected entities head to face target (cross-hair) [Bugged] Entity posing \u00b6 Player model - Steve or Alex Skin & Select skin - Select a skin .png file to use as the players texture Show second layer - Show second skin layers. Usually for hats and stuff. Scale - Scale player model Head scale - Scales just the players head Pose part - all , head , chest , leftArm , rightArm , leftLeg , rightLeg pitch yaw roll Gear leftHand rightHand head chest legs feet","title":"Entities"},{"location":"user_interface/render/entities/#render-controls-entities","text":"The entities tab lets you create, pose, and remove entities within the scene.","title":"Render Controls - Entities"},{"location":"user_interface/render/entities/#entity-controls","text":"Entity table - Stores a list of Entities that have been loaded and added by the user. - - Remove selected entity + - Add new player entity at target (cross-hair) Camera to entity - Teleports current camera to the selected entities position Player to camera - Moves selected entity to camera position Entity to target - Moves selected entity to target (cross-hair) Face camera - Rotates selected entities head to face camera [Bugged] Face target - Rotates selected entities head to face target (cross-hair) [Bugged]","title":"Entity controls"},{"location":"user_interface/render/entities/#entity-posing","text":"Player model - Steve or Alex Skin & Select skin - Select a skin .png file to use as the players texture Show second layer - Show second skin layers. Usually for hats and stuff. Scale - Scale player model Head scale - Scales just the players head Pose part - all , head , chest , leftArm , rightArm , leftLeg , rightLeg pitch yaw roll Gear leftHand rightHand head chest legs feet","title":"Entity posing"},{"location":"user_interface/render/help/","text":"Render Controls - Help \u00b6 Camera key bindings (Standard camera projection) W - move forward (1 unit) S - move backward (1 unit) A - strafe left (1 unit) D - strafe right (1 unit) R - move up (1 unit) F - move down (1 unit) Modifier keys Shift - 0.1x Ctrl - 100x","title":"Help"},{"location":"user_interface/render/help/#render-controls-help","text":"Camera key bindings (Standard camera projection) W - move forward (1 unit) S - move backward (1 unit) A - strafe left (1 unit) D - strafe right (1 unit) R - move up (1 unit) F - move down (1 unit) Modifier keys Shift - 0.1x Ctrl - 100x","title":"Render Controls - Help"},{"location":"user_interface/render/lighting/","text":"Render Controls - Lighting \u00b6 Sky and Emitters \u00b6 Sky Light - This adjusts the intensity of rays hitting the sky. Higher values will have more ambient lighting, lower values will have less. The default of 1 is a good balance. Reflections can appear blown out if set too high. Enable emitters - Enables emitters such as torches, glowstone, etc.. When disabled, they are treated like normal, diffuse blocks, and will not light up the scene. When enabled, they may initially produce noise due to path tracing. Emitter intensity - The emitter intensity multiplier. Higher values will result in brighter emitters. The default of 13 is a good balance. This is compounded with each materials Emittance value. Emitter Sampling Strategy (ESS) - This is a powerful setting that helps decrease emitter noise at the cost of more processing power per sample. At each vertex of the ray traced path, a random (if ONE is selected) or all emitters (if ALL is selected) are sampled within a certain distance. The world must be reloaded if this is enabled when it was previously disabled. Sunlight \u00b6 Enable sunlight - This setting enables / disables the contribution of sunlight. In indoor renders, this may be safely disabled to increase performance especially if rendering underground. Draw sun - This setting controls drawing the sun on the skybox. Sun intensity - The sun intensity multiplier. Higher values will result in a brighter sun and a greater contribution of sunlight. The default of 1.25 is a good balance. Sun azimuth - The angle of the sun from the north. Sun altitude - The angle of the sun from the horizon. Sun color - The color of sunlight. Default is pure white .","title":"Lighting"},{"location":"user_interface/render/lighting/#render-controls-lighting","text":"","title":"Render Controls - Lighting"},{"location":"user_interface/render/lighting/#sky-and-emitters","text":"Sky Light - This adjusts the intensity of rays hitting the sky. Higher values will have more ambient lighting, lower values will have less. The default of 1 is a good balance. Reflections can appear blown out if set too high. Enable emitters - Enables emitters such as torches, glowstone, etc.. When disabled, they are treated like normal, diffuse blocks, and will not light up the scene. When enabled, they may initially produce noise due to path tracing. Emitter intensity - The emitter intensity multiplier. Higher values will result in brighter emitters. The default of 13 is a good balance. This is compounded with each materials Emittance value. Emitter Sampling Strategy (ESS) - This is a powerful setting that helps decrease emitter noise at the cost of more processing power per sample. At each vertex of the ray traced path, a random (if ONE is selected) or all emitters (if ALL is selected) are sampled within a certain distance. The world must be reloaded if this is enabled when it was previously disabled.","title":"Sky and Emitters"},{"location":"user_interface/render/lighting/#sunlight","text":"Enable sunlight - This setting enables / disables the contribution of sunlight. In indoor renders, this may be safely disabled to increase performance especially if rendering underground. Draw sun - This setting controls drawing the sun on the skybox. Sun intensity - The sun intensity multiplier. Higher values will result in a brighter sun and a greater contribution of sunlight. The default of 1.25 is a good balance. Sun azimuth - The angle of the sun from the north. Sun altitude - The angle of the sun from the horizon. Sun color - The color of sunlight. Default is pure white .","title":"Sunlight"},{"location":"user_interface/render/materials/","text":"Render Controls - Materials \u00b6 The Filter field can be used to filter materials list to find the exact block you wish to edit. The following section explains the available material properties. Material Properties \u00b6 Emittance \u00b6 This controls the amount of light that a block emits. For full blocks, you can calculate the Chunky emittance from Minecraft brightness by dividing by 15. For example, glowstone uses 1.0 while magma uses 0.6 by default. Due to the way Chunky renders scenes, the brightness depends on the surface area of the block. A torch requires a much higher emittance value (and thus results in a lot of noise) to achieve the same amount of brightness as a full block. Chunky uses a default emittance of 50 for torches. Specular \u00b6 This controls the specular reflection (0.0 - 1.0). This is a mirror-like reflection of light and is perfect for glossy non-metallic materials (e.g. diamonds). A value of 0 will result in a non-reflective block, a value of 1 will make it a perfect mirror. Tip Some people use a small specular value on e.g. the grass block to achieve a wet surface look. While physically correct rendering of wet surfaces is way more complex , this is a decent way to render rainy scenes in Chunky. Smoothness \u00b6 This controls a material smoothness/roughness (0.0 - 1.0). This is an approximation of surface irregularities and leads to fuzzy or diffuse reflection. Lower values increase roughness. Smoothness vs. roughness Internally, Chunky uses linear roughness for its calculations. Working with roughness is pretty hard for a human, which is why LabPBR introduced perceptual smoothness . This makes it so that 0.5 feels like twice as smooth as 0.25 for a human. You can find out more about this, including the formula to convert between perceptional smoothness and linear roughness in the shaderLABS Wiki . IoR \u00b6 The Index of Refraction controls how much slower the light travels inside the block, relative to a vacuum. This is the effect that makes water and glass \"bend\" the light while it enters and exits (i.e. transitions between materials). Metalness \u00b6 In the real world, metals reflect in a different way than dielectric (i.e. non-metals), which is what makes them shiny. A value of 0 means that it will only have specular reflection and a value of 1 means that it will only have metallic reflection. Metallic reflection compared to specular reflection. Metalness vs. real world While there is no such thing as 50% metalness for a real material, you can use this to approximate dirty metallic surfaces (and use it for other artistic purposes, of course). For example, Chunky uses metalness values smaller than 1 for oxidized copper blocks by default.","title":"Materials"},{"location":"user_interface/render/materials/#render-controls-materials","text":"The Filter field can be used to filter materials list to find the exact block you wish to edit. The following section explains the available material properties.","title":"Render Controls - Materials"},{"location":"user_interface/render/materials/#material-properties","text":"","title":"Material Properties"},{"location":"user_interface/render/materials/#emittance","text":"This controls the amount of light that a block emits. For full blocks, you can calculate the Chunky emittance from Minecraft brightness by dividing by 15. For example, glowstone uses 1.0 while magma uses 0.6 by default. Due to the way Chunky renders scenes, the brightness depends on the surface area of the block. A torch requires a much higher emittance value (and thus results in a lot of noise) to achieve the same amount of brightness as a full block. Chunky uses a default emittance of 50 for torches.","title":"Emittance"},{"location":"user_interface/render/materials/#specular","text":"This controls the specular reflection (0.0 - 1.0). This is a mirror-like reflection of light and is perfect for glossy non-metallic materials (e.g. diamonds). A value of 0 will result in a non-reflective block, a value of 1 will make it a perfect mirror. Tip Some people use a small specular value on e.g. the grass block to achieve a wet surface look. While physically correct rendering of wet surfaces is way more complex , this is a decent way to render rainy scenes in Chunky.","title":"Specular"},{"location":"user_interface/render/materials/#smoothness","text":"This controls a material smoothness/roughness (0.0 - 1.0). This is an approximation of surface irregularities and leads to fuzzy or diffuse reflection. Lower values increase roughness. Smoothness vs. roughness Internally, Chunky uses linear roughness for its calculations. Working with roughness is pretty hard for a human, which is why LabPBR introduced perceptual smoothness . This makes it so that 0.5 feels like twice as smooth as 0.25 for a human. You can find out more about this, including the formula to convert between perceptional smoothness and linear roughness in the shaderLABS Wiki .","title":"Smoothness"},{"location":"user_interface/render/materials/#ior","text":"The Index of Refraction controls how much slower the light travels inside the block, relative to a vacuum. This is the effect that makes water and glass \"bend\" the light while it enters and exits (i.e. transitions between materials).","title":"IoR"},{"location":"user_interface/render/materials/#metalness","text":"In the real world, metals reflect in a different way than dielectric (i.e. non-metals), which is what makes them shiny. A value of 0 means that it will only have specular reflection and a value of 1 means that it will only have metallic reflection. Metallic reflection compared to specular reflection. Metalness vs. real world While there is no such thing as 50% metalness for a real material, you can use this to approximate dirty metallic surfaces (and use it for other artistic purposes, of course). For example, Chunky uses metalness values smaller than 1 for oxidized copper blocks by default.","title":"Metalness"},{"location":"user_interface/render/postprocessing/","text":"Render Controls - Postprocessing \u00b6 Exposure - Changes the image exposure. Default 1. Postprocessing mode - Changes the tonemap used, each look different so pick what you like. Default Gamma correction . None Gamma correction Tonemap operator 1 ACES filmic tonemapping Hable tonemapping","title":"Postprocessing"},{"location":"user_interface/render/postprocessing/#render-controls-postprocessing","text":"Exposure - Changes the image exposure. Default 1. Postprocessing mode - Changes the tonemap used, each look different so pick what you like. Default Gamma correction . None Gamma correction Tonemap operator 1 ACES filmic tonemapping Hable tonemapping","title":"Render Controls - Postprocessing"},{"location":"user_interface/render/render_preview/","text":"Render Controls - Render Preview \u00b6 Once chunks have been selected and loaded they can be viewed in 3D within the Render Preview tab; Chunky should automatically switch to this view once chunks or a scene have been loaded. Depending on a few conditions either a fast flat path-traced preview image of the view into the world will be displayed OR, if either the render is started or there exists a dump file for the scene, a higher quality, and possibility noisy, multi-sample path-traced image will be shown; and updated in real-time as new samples are completed. Below is an example of the path tracer in action. Controls \u00b6 Camera key bindings (Standard camera projection) W - move forward (1 unit) S - move backward (1 unit) A - strafe left (1 unit) D - strafe right (1 unit) R - move up (1 unit) F - move down (1 unit) Modifier keys Shift - 0.1x Ctrl - 100x Right click menu \u00b6 Set target - Default targeting is center view, this changes the target to a location on screen. Useful for Autofocus . Show Guides - Enables thirds guidelines (overlay) to help frame up shots. Canvas scale - Default is Fit to Screen with fixed scale options between 25% and 400% . Target details \u00b6 The Target details box shows up in the bottom left-hand corner of the preview tab when the target changes; mouse dragging or via Set Target . The three lines provide the following information: Subject Distance in metres. Block and state of target (not including entities). Position of target.","title":"Render Preview"},{"location":"user_interface/render/render_preview/#render-controls-render-preview","text":"Once chunks have been selected and loaded they can be viewed in 3D within the Render Preview tab; Chunky should automatically switch to this view once chunks or a scene have been loaded. Depending on a few conditions either a fast flat path-traced preview image of the view into the world will be displayed OR, if either the render is started or there exists a dump file for the scene, a higher quality, and possibility noisy, multi-sample path-traced image will be shown; and updated in real-time as new samples are completed. Below is an example of the path tracer in action.","title":"Render Controls - Render Preview"},{"location":"user_interface/render/render_preview/#controls","text":"Camera key bindings (Standard camera projection) W - move forward (1 unit) S - move backward (1 unit) A - strafe left (1 unit) D - strafe right (1 unit) R - move up (1 unit) F - move down (1 unit) Modifier keys Shift - 0.1x Ctrl - 100x","title":"Controls"},{"location":"user_interface/render/render_preview/#right-click-menu","text":"Set target - Default targeting is center view, this changes the target to a location on screen. Useful for Autofocus . Show Guides - Enables thirds guidelines (overlay) to help frame up shots. Canvas scale - Default is Fit to Screen with fixed scale options between 25% and 400% .","title":"Right click menu"},{"location":"user_interface/render/render_preview/#target-details","text":"The Target details box shows up in the bottom left-hand corner of the preview tab when the target changes; mouse dragging or via Set Target . The three lines provide the following information: Subject Distance in metres. Block and state of target (not including entities). Position of target.","title":"Target details"},{"location":"user_interface/render/scene/","text":"Render Controls - Scene \u00b6 General \u00b6 Scene(name) - Input field for the current scene's name (Press enter to apply). Save scene - Saves current scene. Load scene - Opens the Select 3D Scene dialog. Save current frame - Saves the current frame of the Render based upon Output mode set under the Advanced Tab . Copy current frame - Copies the current frame of the render to the clipboard based upon Output mode set under the Advanced Tab . Start - Start / Resume render Pause - Pause current render; current sample must finish before Chunky can pause. Reset - Reset render back to 0 samples/preview. Target SPP - Controls target SPP . Can be altered on the go. Render time - Duration of the current render. Progress - Visual progress bar of the current render progress. SPP - Samples Per Pixel is one of the defining factors to render quality. SPS - An averaged measure of the Samples Per Second. Should note that for a 1920x1080 image there are around 2.07 million, or mega, pixels and all of these need to be sampled before SPP is incremented. ETA - Rough estimate for render completion based on SPS . Select 3D Scene \u00b6 Provides a list of all detected scenes in the Scenes directory. Delete - Deletes the currently selected scene (with a confirmation prompt). Export - Exports the currently selected scene as a .zip file to a custom location. Cancel - Closes the Select 3D Scene dialog Load selected scene - Load the scene you have selected; Can also double-click on a scene to load it. Scene tab \u00b6 Scene and chunks \u00b6 Open scene directory - Opens current scenes' directory on disk. It is ~/.chunky/scenes by default. Export settings - This allows you to export settings to a copyable JSON. You can individually choose which settings to export. Import settings - This allows you to import settings generated by Export settings . Restore default settings - Reset all scene settings to the default. Load selected chunks - Load the chunks selected in the Map view into Chunky. Once clicked, this will load each chunk of the Minecraft world (which may take a while)! After this process completes, you may begin rendering. Reload chunks - Re-load the currently selected chunks. If working with a loaded scene, ensure the current selected world is the same as the world used to create the scene. Render settings \u00b6 Canvas size \u00b6 Snapshot 2.5.0 This is the resolution at which to render at. Width Height \"Chain\" - Unlock or Lock the aspect ratio. If locked, editing either Width or Height will proportionally alter the other. Apply - Applies any changes to canvas size. You may also press Enter to apply. Set default - Sets current canvas size as default. Flip axes - Flips Width and Height (only available if aspect ratio is not 1:1) x0.5 , x1.5 , x2 - Modifies each axis of the canvas by the amount. ie Wx0.5, Hx0.5 Load entities \u00b6 Select All - Select all entities for loading. Deselect All - Deselect all entities for loading. Note - Should be noted that deselecting these options does not unload entities that have already been loaded; these need to be manually removed via the Entities tab. Players Armor stands Paintings Other Enable biome colors - This checkbox controls biome tinting of natural blocks like grass or leaves. Save dump once every X - This checkbox controls if Chunky will automatically save the scene and render periodically while rendering. This is not instant and does take time to save, so it is recommended to not save too frequently. Save snapshot for each dump - This checkbox controls if Chunky will automatically generate a snapshot and save it when the dump is saved when rendering. Y min clip - This controls the minimum loaded level inclusively. For example if it is set to 0, all blocks at and above y=0 are loaded factoring Y max clip . Y max clip - This controls the maximum loaded level inclusively. For example if it is set to 255, all blocks at and below y=255 are loaded factoring Y min clip .","title":"Scene"},{"location":"user_interface/render/scene/#render-controls-scene","text":"","title":"Render Controls - Scene"},{"location":"user_interface/render/scene/#general","text":"Scene(name) - Input field for the current scene's name (Press enter to apply). Save scene - Saves current scene. Load scene - Opens the Select 3D Scene dialog. Save current frame - Saves the current frame of the Render based upon Output mode set under the Advanced Tab . Copy current frame - Copies the current frame of the render to the clipboard based upon Output mode set under the Advanced Tab . Start - Start / Resume render Pause - Pause current render; current sample must finish before Chunky can pause. Reset - Reset render back to 0 samples/preview. Target SPP - Controls target SPP . Can be altered on the go. Render time - Duration of the current render. Progress - Visual progress bar of the current render progress. SPP - Samples Per Pixel is one of the defining factors to render quality. SPS - An averaged measure of the Samples Per Second. Should note that for a 1920x1080 image there are around 2.07 million, or mega, pixels and all of these need to be sampled before SPP is incremented. ETA - Rough estimate for render completion based on SPS .","title":"General"},{"location":"user_interface/render/scene/#select-3d-scene","text":"Provides a list of all detected scenes in the Scenes directory. Delete - Deletes the currently selected scene (with a confirmation prompt). Export - Exports the currently selected scene as a .zip file to a custom location. Cancel - Closes the Select 3D Scene dialog Load selected scene - Load the scene you have selected; Can also double-click on a scene to load it.","title":"Select 3D Scene"},{"location":"user_interface/render/scene/#scene-tab","text":"","title":"Scene tab"},{"location":"user_interface/render/scene/#scene-and-chunks","text":"Open scene directory - Opens current scenes' directory on disk. It is ~/.chunky/scenes by default. Export settings - This allows you to export settings to a copyable JSON. You can individually choose which settings to export. Import settings - This allows you to import settings generated by Export settings . Restore default settings - Reset all scene settings to the default. Load selected chunks - Load the chunks selected in the Map view into Chunky. Once clicked, this will load each chunk of the Minecraft world (which may take a while)! After this process completes, you may begin rendering. Reload chunks - Re-load the currently selected chunks. If working with a loaded scene, ensure the current selected world is the same as the world used to create the scene.","title":"Scene and chunks"},{"location":"user_interface/render/scene/#render-settings","text":"","title":"Render settings"},{"location":"user_interface/render/scene/#canvas-size","text":"Snapshot 2.5.0 This is the resolution at which to render at. Width Height \"Chain\" - Unlock or Lock the aspect ratio. If locked, editing either Width or Height will proportionally alter the other. Apply - Applies any changes to canvas size. You may also press Enter to apply. Set default - Sets current canvas size as default. Flip axes - Flips Width and Height (only available if aspect ratio is not 1:1) x0.5 , x1.5 , x2 - Modifies each axis of the canvas by the amount. ie Wx0.5, Hx0.5","title":"Canvas size"},{"location":"user_interface/render/scene/#load-entities","text":"Select All - Select all entities for loading. Deselect All - Deselect all entities for loading. Note - Should be noted that deselecting these options does not unload entities that have already been loaded; these need to be manually removed via the Entities tab. Players Armor stands Paintings Other Enable biome colors - This checkbox controls biome tinting of natural blocks like grass or leaves. Save dump once every X - This checkbox controls if Chunky will automatically save the scene and render periodically while rendering. This is not instant and does take time to save, so it is recommended to not save too frequently. Save snapshot for each dump - This checkbox controls if Chunky will automatically generate a snapshot and save it when the dump is saved when rendering. Y min clip - This controls the minimum loaded level inclusively. For example if it is set to 0, all blocks at and above y=0 are loaded factoring Y max clip . Y max clip - This controls the maximum loaded level inclusively. For example if it is set to 255, all blocks at and below y=255 are loaded factoring Y min clip .","title":"Load entities"},{"location":"user_interface/render/sky_and_fog/","text":"Render Controls - Sky & Fog \u00b6 Sky Mode \u00b6 Sky mode - Simulated, Solid Color, Color Gradient, Skymap (panoramic), Skymap (spherical), Skybox, and Black - These options are expanded on below. Sky mode settings Simulated - Simulates a sky Sky Mode - This is the default sky mode that attempts to simulate a real-life sky. There are currently 2 simulation models: Preetham and Nishita. Preetham is a faster, approximate simulation of daytime skies. It is most similar to Minecraft. Nishita is a slower, simulation of all skies. It is most photorealistic but may be challenging to set up since it is not rendered below the horizon. It is best for low sun angles, such as a sunrise or sunset. Horizon offset - can be adjusted to push the simulated horizon below the real horizon. Solid Color - Set the sky to a solid color. RGB picker Color Gradient - Smooth blended gradient between two or more colors from the horizon to the peak of the sky Skymap (panoramic) - Select an equiangular projected skymap; these are the most common type. Equirectangular skymaps can have a 90\u00b0 or 180\u00b0 vertical resolution. With 90\u00b0 vertical resolution the skymap will only cover the sky above the horizon, so it is mirrored at the horizon. If the skymap has 180\u00b0 vertical resolution the mirroring is not needed: the skymap will cover both sky and ground. Panoramic sky textures either taken in real life or generated by other applications can be used. HDR skymaps are supported. Load skymap - Opens a file picker Vertical resolution - Half (mirrored) ie 360x90 or Full 360x180 Skymap rotation - Rotates the skymap horizontally. Skymap (spherical) - These are not common and we do not have any information. Load skymap - Opens a file picker Skymap rotation - Rotates the skymap horizontally. Skybox - Load up to six textures which get mapped onto a cuboid to act as a sky ( more information ). Up , Down , Front , Back , Left , Right - Opens a file picker Skymap rotation - Rotates the skybox horizontally. Black - Sets the sky to a solid Black colour. This is redundant but quick and easy to use. Transparent sky - Makes the sky transparent. Clouds and Fog \u00b6 Enable clouds - Toggles Minecraft style, blocky clouds. Currently, only renders as flat planes, similar to clouds seen in Minecraft's fast graphics mode. Cloud size - Controls the scaling of the clouds; The position of the clouds will change too due the clouds being based on a texture. Cloud X - Shifts clouds along X axis. Cloud Y - Shifts clouds along Y axis / sets the height the clouds render at. Cloud Z - Shifts clouds along Z axis Fog density - Logarithmic scaled Fog density. The default of 0 is off. Scales between 0.001 and 1.0. Depending on scene composition the impact fog density can have is variable. The thickness of the fog is related to the amount of direct sunlight that has passed through it. The effect can only be seen against objects in the world, light paths that lead to the sky will completely ignore this fog, regardless of whether sunlight has passed through it or not. This option can advantageously be used to simulate the rays of sun falling through the window of a dusty library or the sun rays entering a misty cavern. You may need to manually enter values into the text field to access densities between 0.0 - 0.001 and 1.0+. Sky fog blending - Controls the amount that Fog will bleed into the sky. This is not impacted by Fog density and can be used to help avoid masking a Sky Texture while still blending. Fog color - Sets the fog color.","title":"Sky & Fog"},{"location":"user_interface/render/sky_and_fog/#render-controls-sky-fog","text":"","title":"Render Controls - Sky &amp; Fog"},{"location":"user_interface/render/sky_and_fog/#sky-mode","text":"Sky mode - Simulated, Solid Color, Color Gradient, Skymap (panoramic), Skymap (spherical), Skybox, and Black - These options are expanded on below. Sky mode settings Simulated - Simulates a sky Sky Mode - This is the default sky mode that attempts to simulate a real-life sky. There are currently 2 simulation models: Preetham and Nishita. Preetham is a faster, approximate simulation of daytime skies. It is most similar to Minecraft. Nishita is a slower, simulation of all skies. It is most photorealistic but may be challenging to set up since it is not rendered below the horizon. It is best for low sun angles, such as a sunrise or sunset. Horizon offset - can be adjusted to push the simulated horizon below the real horizon. Solid Color - Set the sky to a solid color. RGB picker Color Gradient - Smooth blended gradient between two or more colors from the horizon to the peak of the sky Skymap (panoramic) - Select an equiangular projected skymap; these are the most common type. Equirectangular skymaps can have a 90\u00b0 or 180\u00b0 vertical resolution. With 90\u00b0 vertical resolution the skymap will only cover the sky above the horizon, so it is mirrored at the horizon. If the skymap has 180\u00b0 vertical resolution the mirroring is not needed: the skymap will cover both sky and ground. Panoramic sky textures either taken in real life or generated by other applications can be used. HDR skymaps are supported. Load skymap - Opens a file picker Vertical resolution - Half (mirrored) ie 360x90 or Full 360x180 Skymap rotation - Rotates the skymap horizontally. Skymap (spherical) - These are not common and we do not have any information. Load skymap - Opens a file picker Skymap rotation - Rotates the skymap horizontally. Skybox - Load up to six textures which get mapped onto a cuboid to act as a sky ( more information ). Up , Down , Front , Back , Left , Right - Opens a file picker Skymap rotation - Rotates the skybox horizontally. Black - Sets the sky to a solid Black colour. This is redundant but quick and easy to use. Transparent sky - Makes the sky transparent.","title":"Sky Mode"},{"location":"user_interface/render/sky_and_fog/#clouds-and-fog","text":"Enable clouds - Toggles Minecraft style, blocky clouds. Currently, only renders as flat planes, similar to clouds seen in Minecraft's fast graphics mode. Cloud size - Controls the scaling of the clouds; The position of the clouds will change too due the clouds being based on a texture. Cloud X - Shifts clouds along X axis. Cloud Y - Shifts clouds along Y axis / sets the height the clouds render at. Cloud Z - Shifts clouds along Z axis Fog density - Logarithmic scaled Fog density. The default of 0 is off. Scales between 0.001 and 1.0. Depending on scene composition the impact fog density can have is variable. The thickness of the fog is related to the amount of direct sunlight that has passed through it. The effect can only be seen against objects in the world, light paths that lead to the sky will completely ignore this fog, regardless of whether sunlight has passed through it or not. This option can advantageously be used to simulate the rays of sun falling through the window of a dusty library or the sun rays entering a misty cavern. You may need to manually enter values into the text field to access densities between 0.0 - 0.001 and 1.0+. Sky fog blending - Controls the amount that Fog will bleed into the sky. This is not impacted by Fog density and can be used to help avoid masking a Sky Texture while still blending. Fog color - Sets the fog color.","title":"Clouds and Fog"},{"location":"user_interface/render/water/","text":"Render Controls - Water \u00b6 Water controls \u00b6 Still water - Disables the wavy water ripples. Water visibility - Controls the distances rays can travel in water before being terminated. Water opacity - Controls the opacity of the water; 0 for clear and 1 for solid. User custom water color - Toggle; Otherwise will use biome water color Pick color - Lets you pick the custom water color. Water World \u00b6 Water world mode - Toggles an infinite water plane. Water height - Sets the height of the water world. Lower water by Minecraft offset - Water in Minecraft isn't exactly at block level, this applies an offset so there aren't any gaps. Hide the water plane in loaded chunks Procedural water \u00b6 Snapshot 2.5.0 Procedural water - Enable or disable the use of configurable simplex noise based procedural water shading. Iterations - How many iterations of noise used. Increasing this will reduce performance. Frequency - Increasing the frequency gives you more waves. Amplitude - Controls the \"height\" of the waves Animation speed - Only really used when varying the Animation time .","title":"Water"},{"location":"user_interface/render/water/#render-controls-water","text":"","title":"Render Controls - Water"},{"location":"user_interface/render/water/#water-controls","text":"Still water - Disables the wavy water ripples. Water visibility - Controls the distances rays can travel in water before being terminated. Water opacity - Controls the opacity of the water; 0 for clear and 1 for solid. User custom water color - Toggle; Otherwise will use biome water color Pick color - Lets you pick the custom water color.","title":"Water controls"},{"location":"user_interface/render/water/#water-world","text":"Water world mode - Toggles an infinite water plane. Water height - Sets the height of the water world. Lower water by Minecraft offset - Water in Minecraft isn't exactly at block level, this applies an offset so there aren't any gaps. Hide the water plane in loaded chunks","title":"Water World"},{"location":"user_interface/render/water/#procedural-water","text":"Snapshot 2.5.0 Procedural water - Enable or disable the use of configurable simplex noise based procedural water shading. Iterations - How many iterations of noise used. Increasing this will reduce performance. Frequency - Increasing the frequency gives you more waves. Amplitude - Controls the \"height\" of the waves Animation speed - Only really used when varying the Animation time .","title":"Procedural water"}]}